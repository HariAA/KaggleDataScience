{
  "cells": [
    {
      "metadata": {
        "_kg_hide-input": false,
        "_kg_hide-output": false,
        "_uuid": "a8ae8bb1160bb4d6c2fd99f6cff85fbcedea155b"
      },
      "cell_type": "markdown",
      "source": "OK!!! So I have started a new journey into the world of Data Science, Machine Learning and AI. What better place to start than in Kaggle :-)\n    \nSo here's my attempt on **Titanic Data Set problem**\n"
    },
    {
      "metadata": {
        "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
        "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
        "trusted": true,
        "collapsed": true
      },
      "cell_type": "code",
      "source": "\n#First lets import the required libraries\nimport pandas as pd\n\n\n# import visualization libraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# import machine learning libraries\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\n",
      "execution_count": 101,
      "outputs": []
    },
    {
      "metadata": {
        "_uuid": "2d5dd012b1ee2f067d827e5fad14d2f5afc6f7b4"
      },
      "cell_type": "markdown",
      "source": "After having worked on over 50 version of my code, i realized data knowledge on the concepts of machine learning alone will not be enough. You also need know have a strong hold on the concepts of data science.\nMany of the submission made, the key thing which makes a submission get higher score is not much to do with the model used, but on how the data is **enriched**.\n\n"
    },
    {
      "metadata": {
        "_cell_guid": "79c7e3d0-c299-4dcb-8224-4455121ee9b0",
        "_uuid": "d629ff2d2480ee46fbb7e2d37f6b5fab8052498a",
        "trusted": true
      },
      "cell_type": "code",
      "source": "\n# First lets combine the train and test data set as we would be doing few clean up task and perform some feature engineering.\ntrain_df = pd.read_csv('../input/train.csv')\ntest_df = pd.read_csv('../input/test.csv')\nallset=train_df.append(test_df, sort=False)\n\n#Data preview\nallset.head(20)\n",
      "execution_count": 102,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 102,
          "data": {
            "text/plain": "    PassengerId  Survived  Pclass    ...        Fare Cabin  Embarked\n0             1       0.0       3    ...      7.2500   NaN         S\n1             2       1.0       1    ...     71.2833   C85         C\n2             3       1.0       3    ...      7.9250   NaN         S\n3             4       1.0       1    ...     53.1000  C123         S\n4             5       0.0       3    ...      8.0500   NaN         S\n5             6       0.0       3    ...      8.4583   NaN         Q\n6             7       0.0       1    ...     51.8625   E46         S\n7             8       0.0       3    ...     21.0750   NaN         S\n8             9       1.0       3    ...     11.1333   NaN         S\n9            10       1.0       2    ...     30.0708   NaN         C\n10           11       1.0       3    ...     16.7000    G6         S\n11           12       1.0       1    ...     26.5500  C103         S\n12           13       0.0       3    ...      8.0500   NaN         S\n13           14       0.0       3    ...     31.2750   NaN         S\n14           15       0.0       3    ...      7.8542   NaN         S\n15           16       1.0       2    ...     16.0000   NaN         S\n16           17       0.0       3    ...     29.1250   NaN         Q\n17           18       1.0       2    ...     13.0000   NaN         S\n18           19       0.0       3    ...     18.0000   NaN         S\n19           20       1.0       3    ...      7.2250   NaN         C\n\n[20 rows x 12 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1.0</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Moran, Mr. James</td>\n      <td>male</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>330877</td>\n      <td>8.4583</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>7</td>\n      <td>0.0</td>\n      <td>1</td>\n      <td>McCarthy, Mr. Timothy J</td>\n      <td>male</td>\n      <td>54.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>17463</td>\n      <td>51.8625</td>\n      <td>E46</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>8</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Palsson, Master. Gosta Leonard</td>\n      <td>male</td>\n      <td>2.0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>349909</td>\n      <td>21.0750</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>9</td>\n      <td>1.0</td>\n      <td>3</td>\n      <td>Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)</td>\n      <td>female</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>347742</td>\n      <td>11.1333</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>10</td>\n      <td>1.0</td>\n      <td>2</td>\n      <td>Nasser, Mrs. Nicholas (Adele Achem)</td>\n      <td>female</td>\n      <td>14.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>237736</td>\n      <td>30.0708</td>\n      <td>NaN</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>11</td>\n      <td>1.0</td>\n      <td>3</td>\n      <td>Sandstrom, Miss. Marguerite Rut</td>\n      <td>female</td>\n      <td>4.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>PP 9549</td>\n      <td>16.7000</td>\n      <td>G6</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>12</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>Bonnell, Miss. Elizabeth</td>\n      <td>female</td>\n      <td>58.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>113783</td>\n      <td>26.5500</td>\n      <td>C103</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>13</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Saundercock, Mr. William Henry</td>\n      <td>male</td>\n      <td>20.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>A/5. 2151</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>14</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Andersson, Mr. Anders Johan</td>\n      <td>male</td>\n      <td>39.0</td>\n      <td>1</td>\n      <td>5</td>\n      <td>347082</td>\n      <td>31.2750</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>15</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Vestrom, Miss. Hulda Amanda Adolfina</td>\n      <td>female</td>\n      <td>14.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>350406</td>\n      <td>7.8542</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>16</td>\n      <td>1.0</td>\n      <td>2</td>\n      <td>Hewlett, Mrs. (Mary D Kingcome)</td>\n      <td>female</td>\n      <td>55.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>248706</td>\n      <td>16.0000</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>17</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Rice, Master. Eugene</td>\n      <td>male</td>\n      <td>2.0</td>\n      <td>4</td>\n      <td>1</td>\n      <td>382652</td>\n      <td>29.1250</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>18</td>\n      <td>1.0</td>\n      <td>2</td>\n      <td>Williams, Mr. Charles Eugene</td>\n      <td>male</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>244373</td>\n      <td>13.0000</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>19</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Vander Planke, Mrs. Julius (Emelia Maria Vande...</td>\n      <td>female</td>\n      <td>31.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>345763</td>\n      <td>18.0000</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>20</td>\n      <td>1.0</td>\n      <td>3</td>\n      <td>Masselmani, Mrs. Fatima</td>\n      <td>female</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2649</td>\n      <td>7.2250</td>\n      <td>NaN</td>\n      <td>C</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "7a5c59700f92eaaaa0c23afc71fe6a4838eb1b7a"
      },
      "cell_type": "markdown",
      "source": "Lets have a look at the following 3 features\n* Sex\n* Pclass\n* Embarked\n\nA picture can explain better than words..."
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "0fbd4ccbb8e923c8bc3eec6063481cbe6f578fec"
      },
      "cell_type": "code",
      "source": "# The output variable to predict is survived. We will try to check how the various feature provided affect the output variable\n# Plotting a graph with Sex on x-axis and average survival rate on Y-axis below:\nChart, items =plt.subplots(1,3,figsize=(25,5))\nCGender = sns.barplot(x=\"Sex\",y=\"Survived\",data=allset,ax=items[0])\nCGender = CGender.set_ylabel(\"Survival Probability\")\nCClass = sns.barplot(x=\"Pclass\",y=\"Survived\",data=allset,ax=items[1])\nCClass = CClass.set_ylabel(\"Survival Probability\")\nCEmbarked = sns.barplot(x=\"Embarked\",y=\"Survived\",data=allset,ax=items[2])\nCEmbarked = CEmbarked.set_ylabel(\"Survival Probability\")\n",
      "execution_count": 103,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<matplotlib.figure.Figure at 0x7f80c56d16d8>",
            "image/png": "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\nRwAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "6ad0f44749683b74a0a9cf767013ea020c3d1134"
      },
      "cell_type": "markdown",
      "source": "As you can see from the graph above, all 3 features have a good correlation with teh output variable Survived. \n - female have higher chance of survival than males\n - passeger in the higher class (class 1) have more chances of survival than in lower classes\n - passenger who have boarded from point C have higher survival rate, and passenger who have boarded from S, have the lowest survival rate\n  \n  Considering the above, we will include all these 3 features as input to our model( after one key change..shown later)\n  \n  Let's Look at Age Parameter. Some work to be done here.\n  First of all age field is a numerical field. In Data science world, its also called continuous variable. In order to its importance, its best to convert it into a categorical variable.\n  We will group age into different buckets. But before that, some cleaning up to be done. Age feature has about 263 values which are null. We would need to fill this up with our best guess possible."
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "aed5696d5e0e622d77215e1c0434776ac447efd4"
      },
      "cell_type": "code",
      "source": "allset.Age.isnull().sum()",
      "execution_count": 104,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 104,
          "data": {
            "text/plain": "263"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "a08b2acb33bb0ef64f34817d7c468cece043a7de"
      },
      "cell_type": "markdown",
      "source": "We could update these blank values with the average age, but updating about 20% of the data with a single avg value might add more noise to the data set. Lets try to look how the age is related to other features\n"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "8488a8659fd01e932de3244f502de36821d35a86"
      },
      "cell_type": "code",
      "source": "AgeGroup=allset[['Age', 'Pclass','Sex']].groupby(['Sex','Pclass'], as_index=False).mean().sort_values(by=['Sex','Pclass'], ascending=True)\nAgeGroup",
      "execution_count": 105,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 105,
          "data": {
            "text/plain": "      Sex  Pclass        Age\n0  female       1  37.037594\n1  female       2  27.499223\n2  female       3  22.185329\n3    male       1  41.029272\n4    male       2  30.815380\n5    male       3  25.962264",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Sex</th>\n      <th>Pclass</th>\n      <th>Age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>female</td>\n      <td>1</td>\n      <td>37.037594</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>female</td>\n      <td>2</td>\n      <td>27.499223</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>female</td>\n      <td>3</td>\n      <td>22.185329</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>male</td>\n      <td>1</td>\n      <td>41.029272</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>male</td>\n      <td>2</td>\n      <td>30.815380</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>male</td>\n      <td>3</td>\n      <td>25.962264</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "077f76c71d1fefa32c5a7a3f542c7806062cebf9"
      },
      "cell_type": "markdown",
      "source": "There seems to be some pattern in the table above. Passenger in higher class are generally older than those in the lower classes. Also avg age of men in each class is higher than in women.\nAlso there are age values in decimals, which means there are infants on board, we should be able to identify them, but not with class or sex. \nI would use the name feature here, since it has a title againt each passenger which can tell what type of person he/she is. Ex: Mr, Mrs, Miss, Master etc. Master is used to identify infant boys. \nSo i think its worth extracting the title feature."
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "0798da7402780026567646e316f7d58bee9b905b"
      },
      "cell_type": "code",
      "source": "# extracts the word before the string char \".\" this should give the salutation\nallset['Salutation']=allset.Name.str.extract('([A-Za-z]+)\\.', expand=False)\n#grouping similar titles in one category\nallset['Salutation'] = allset['Salutation'].replace(['Capt', 'Col','Major', 'Sir'], 'Officer')\n#cleaning some titles which look like errors\nallset['Salutation'] = allset['Salutation'].replace('Mlle', 'Miss')\nallset['Salutation'] = allset['Salutation'].replace('Mme', 'Mrs')\nallset['Salutation'] = allset['Salutation'].replace('Ms', 'Miss')\n#grouping remaining titles into a last category called Rate\nallset['Salutation'] = allset['Salutation'].replace(['Lady', 'Countess','Don', 'Dr','Rev','Jonkheer', 'Dona'], 'Rare')\nprint(allset['Salutation'].unique())",
      "execution_count": 106,
      "outputs": [
        {
          "output_type": "stream",
          "text": "['Mr' 'Mrs' 'Miss' 'Master' 'Rare' 'Officer']\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "629e42eea9edc47ff2357ef0a0fbaee6b965a2f0"
      },
      "cell_type": "markdown",
      "source": "Now i am going to use Sex, Pclass and Salutation together to create a table of avg ages for each group. I will then use this to fill up the missing values of age based on which category that passenger belongs to"
    },
    {
      "metadata": {
        "trusted": true,
        "collapsed": true,
        "_uuid": "9890334f2f20e231e2a8cde70504f65ba8e9718e"
      },
      "cell_type": "code",
      "source": "#get all not null age data set\nYesAge=allset[allset['Age']>0]\n#create a table which stores the average age for each combination of Pclass, Sex and Salutation\nAgeGroup=YesAge[['Age', 'Pclass','Sex','Salutation']].groupby(['Sex','Pclass','Salutation'], as_index=False).mean().sort_values(by=['Sex','Pclass','Salutation'], ascending=True)\n\n#Iterate through the data set and fill up the empty age values using the table create above as reference\nfor Sex in allset.Sex.unique():\n        for Class in allset.Pclass.unique():\n            for Salutation in allset.Salutation.unique():\n                if AgeGroup.loc[(AgeGroup.Sex==Sex) & (AgeGroup.Pclass==Class) & (AgeGroup.Salutation==Salutation),'Age'].count()>0:\n                    allset.loc[ (allset.Age.isnull()) & (allset.Sex == Sex) & (allset.Pclass == Class) & (allset.Salutation == Salutation),'Age'] = AgeGroup.loc[(AgeGroup.Sex==Sex) & (AgeGroup.Pclass==Class) & (AgeGroup.Salutation==Salutation),'Age'].values[0]\n",
      "execution_count": 107,
      "outputs": []
    },
    {
      "metadata": {
        "_uuid": "d62c7825757cf2f99f99002bf328712566b103f0"
      },
      "cell_type": "markdown",
      "source": "Lets bucket the age feature. Pandas library offers two functions cut and qcut to buckets age group. Lets see how they both look. We will bucket the age into 4 sets"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "9b4247157b9f9e074447b55ef64e56cf9d49bdde"
      },
      "cell_type": "code",
      "source": "allset['AgeBand']=pd.cut(allset['Age'],4)\nChart, items =plt.subplots(1,2,figsize=(25,5))\nCAgeCut = sns.barplot(x=\"AgeBand\",y=\"Survived\",data=allset,ax=items[0])\nCAgeCut = CAgeCut.set_ylabel(\"Survival Probability\")\nallset['AgeBand']=pd.qcut(allset['Age'],4)\nCAgeQCut = sns.barplot(x=\"AgeBand\",y=\"Survived\",data=allset,ax=items[1])\nCAgeQCut = CAgeQCut.set_ylabel(\"Survival Probability\")\n",
      "execution_count": 108,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<matplotlib.figure.Figure at 0x7f80c56d24a8>",
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABakAAAFACAYAAAC2vvCTAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4wLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvpW3flQAAIABJREFUeJzs3Xu4JXdVJ+7PSjch3JRLokESSBji\nJQKCtBEEAUEQUIMIDgEZQOTJDzWig5CBESPC8IwEB2/gYFBEGDUI4hiYaESGi6JgOhBCEgiEcEkn\n9BCIXOXWZP3+qDph53Auu7vP7jqn+32fZz+nbrv22qe+p2rVOlXfqu4OAAAAAABM4bCpAwAAAAAA\n4NClSA0AAAAAwGQUqQEAAAAAmIwiNQAAAAAAk1GkBgAAAABgMorUAAAAAABMRpEaAAAAAIDJKFID\nAAAAADAZRWoAAAAAACazfeoA9taRRx7Zxx133NRhAACwwS644IJPdvdRU8fBgSfHBwA4OM2b42+5\nIvVxxx2XnTt3Th0GAAAbrKo+OnUMTEOODwBwcJo3x9fdBwAAAAAAk1GkBgAAAABgMorUAAAAAABM\nRpEaAAAAAIDJKFIDAAAAADAZRWoAAAAAACajSA0AAAAAwGQUqQEAAAAAmIwiNQAAAAAAk1GkBgAA\nAABgMtunDoAD4/TTT8/u3btz9NFH58wzz5w6HAAAYD/J8QGAg4Ui9SFi9+7dueqqq6YOAwAA2CBy\nfADgYKFIDQAAAMCm5u4ROLgpUgMAAACwqbl7BA5uHpwIAAAAAMBkFKkBAAAAAJiMIjUAAAAAAJNR\npAYAAOZWVQ+pqsuq6vKqeuYK859YVddU1YXj68lTxAkAwNbhwYkAAMBcqmpbkpckeVCSXUnOr6pz\nuvvSZYu+urtPO+ABAgCwJbmSGgAAmNdJSS7v7iu6+ytJzk7y8IljAgBgi1OkBgAA5nW7JFfOjO8a\npy33yKq6qKpeW1XHrrSiqjq1qnZW1c5rrrlmEbECALBFKFIDAADzqhWm9bLx1yc5rrvvmuQfkvzp\nSivq7rO6e0d37zjqqKM2OEwAALYSRWoAAGBeu5LMXhl9TJKrZxfo7k9195fH0ZcluccBig0AgC1K\nkRoAAJjX+UlOqKrjq+rwJKckOWd2gaq67czoyUnedwDjAwBgC9o+dQAAAMDW0N17quq0JOcl2Zbk\n5d19SVU9N8nO7j4nyVOr6uQke5Jcm+SJkwUMAMCWoEgNAADMrbvPTXLusmlnzAw/K8mzDnRcAABs\nXbr7AAAAAABgMorUAAAAAABMRpEaAAAAAIDJKFIDAAAAADAZRWoAAAAAACajSA0AAAAAwGQWWqSu\nqodU1WVVdXlVPXOF+U+sqmuq6sLx9eRFxgMAAAAAwOayfVErrqptSV6S5EFJdiU5v6rO6e5Lly36\n6u4+bVFxAAAAAACweS3ySuqTklze3Vd091eSnJ3k4Qv8PAAAAAAAtphFFqlvl+TKmfFd47TlHllV\nF1XVa6vq2JVWVFWnVtXOqtp5zTXXLCJWAAAAAAAmsMgida0wrZeNvz7Jcd191yT/kORPV1pRd5/V\n3Tu6e8dRRx21wWECAAAAADCVRRapdyWZvTL6mCRXzy7Q3Z/q7i+Poy9Lco8FxgMAAAAAwCazyCL1\n+UlOqKrjq+rwJKckOWd2gaq67czoyUnet8B4AAAAAADYZLYvasXdvaeqTktyXpJtSV7e3ZdU1XOT\n7Ozuc5I8tapOTrInybVJnrioeAAAAAAA2HwWVqROku4+N8m5y6adMTP8rCTPWmQMAAAAAABsXovs\n7gMAAAAAANakSA0AAAAAwGQUqQEAAAAAmMxC+6QGgCmcfvrp2b17d44++uiceeaZU4cDwILd4xmv\nnDqESdzik5/LtiQf++TnDtnfwQUvfPzUIQAAG0CRGoCDzu7du3PVVVdNHQYAAABbnIugDoxDrkh9\nqF5h4CoLV1kAAAAAsHdcBHVgHHJFagAAAICt6t6/f++pQ5jE4Z8+PIflsFz56SsP2d/B23/x7VOH\nAAvjwYkAAAAAAExGkRoAAAAAgMkoUgMAAAAAMBlFagAAAAAAJqNIDQAAAADAZBSpAQAAAACYjCI1\nAAAAAACTUaQGAAAAAGAyitQAAAAAAExGkRoAAAAAgMkoUgMAAAAAMBlFagAAAAAAJqNIDQAAAADA\nZBSpAQAAAACYjCI1AAAAAACTUaQGAAAAAGAyitQAAAAAAExGkRoAAAAAgMkoUgMAAAAAMBlFagAA\nYG5V9ZCquqyqLq+qZ66x3KOqqqtqx4GMDwCArUeRGgAAmEtVbUvykiQPTXJiksdU1YkrLHeLJE9N\n8s4DGyEAAFuRIjUAADCvk5Jc3t1XdPdXkpyd5OErLPe8JGcm+dKBDA4AgK1JkRoAAJjX7ZJcOTO+\na5x2vaq6e5Jju/sNa62oqk6tqp1VtfOaa67Z+EgBANgyFKkBAIB51QrT+vqZVYcl+e0kv7Leirr7\nrO7e0d07jjrqqA0MEQCArUaRGgAAmNeuJMfOjB+T5OqZ8VskuXOSt1TVR5LcM8k5Hp4IAMBaFKkB\nAIB5nZ/khKo6vqoOT3JKknOWZnb3Z7r7yO4+rruPS/KOJCd3985pwgUAYCtQpAYAAObS3XuSnJbk\nvCTvS/KX3X1JVT23qk6eNjoAALaq7VMHAAAAbB3dfW6Sc5dNO2OVZe9/IGICAGBrU6QGAADYgq47\n/GY3+AkAsFUpUh8iJLAAsHinn356du/enaOPPjpnnnnm1OEAB7kvnPDgqUMAANgQitSHCAksACze\n7t27c9VVV00dBgAAwJay0AcnVtVDquqyqrq8qp65xnKPqqquqh2LjAcAAAAAgM1lYVdSV9W2JC9J\n8qAku5KcX1XndPely5a7RZKnJnnnomIBAAAAAPbNW+97v6lDmMwXt29LqvLFXbsOyd/D/d721gPy\nOYvs7uOkJJd39xVJUlVnJ3l4kkuXLfe8JGcmefoCYwE4JN379+89dQiTOPzTh+ewHJYrP33lIfs7\nePsvvn3qEAAAAGAui+zu43ZJrpwZ3zVOu15V3T3Jsd39hrVWVFWnVtXOqtp5zTXXbHykAAAAAABM\nYpFF6lphWl8/s+qwJL+d5FfWW1F3n9XdO7p7x1FHHbWBIQIAAAAAMKVFFql3JTl2ZvyYJFfPjN8i\nyZ2TvKWqPpLknknO8fBEAAAAAIBDxyL7pD4/yQlVdXySq5KckuSxSzO7+zNJjlwar6q3JHl6d+9c\nYEwAAAAAbDF90851uS59015/YWDLWViRurv3VNVpSc5Lsi3Jy7v7kqp6bpKd3X3Ooj4bAAAAgIPH\nV+/91alDABZo3SJ1Vd25uy/el5V397lJzl027YxVlr3/vnwGAACwd/YnxwcAgI02z5XUL62qw5O8\nIsmfd/enFxsScDA5/fTTs3v37hx99NE588wzpw4HABjI8QEA2DTWfXBid98nyU9neAjizqr686p6\n0MIjAw4Ku3fvzlVXXZXdu3dPHQoAMJLjAwCwmaxbpE6S7v5gkmcn+S9J7pfk96rq/VX1k4sMDgAA\nWAw5PgAAm8W6ReqqumtV/XaS9yV5QJIf7+7vGod/e8HxAQAAG0yODwDAZjJPn9QvTvKyJP+1u7+4\nNLG7r66qZy8sMgAAYFHk+AAAbBrzdPfxuu5+1WzyWlW/lCTd/aqFRQYAACyKHB8AgE1jniL141eY\n9sQNjgMAADhw5PgAAGwaq3b3UVWPSfLYJMdX1Tkzs26R5FOLDgwAANhYcnwAADajtfqk/uckH09y\nZJL/MTP9c0kuWmRQAADAQsjxAQDYdFYtUnf3R5N8NMm9Dlw4AADAosjxAQDYjNbq7uOfuvs+VfW5\nJD07K0l39zctPDoAAGDDyPEBANiM1rqS+j7jz1scuHAAAIBFkeMDALAZrXUl9a3XemN3X7vx4QAA\nAIsixwcAYDNa68GJF2S4BbBWmNdJ7riQiAAAgEWR4wMAsOms1d3H8QcyEAAAYLHk+AAAbEZrdffx\nnd39/qr63pXmd/e7FhcWAACw0eT4AABsRmt19/G0JKcm+R8rzOskD1hIRAAAwKLI8YH9dvrpp2f3\n7t05+uijc+aZZ04dDgAHgbW6+zh1/PlDBy4cAABgUeT4wEbYvXt3rrrqqqnDAOAgstaV1EmSqjoi\nyc8nuU+Gqyv+MclLu/tLC44NAABYADk+AACbybpF6iSvTPK5JL8/jj8myauS/NSiggIAABZKjg8A\nwKYxT5H6O7r7e2bG31xV71lUQHAw+thz7zJ1CJPZc+2tk2zPnms/ekj+Hm5/xnunDgEAViLHBwBg\n0zhsjmXeXVX3XBqpqu9P8vbFhQQAACyYHB8AgE1j1Supq+q9Gfqnu1GSx1fVx8bxOyS59MCEBwAA\nbBQ5PgDA3rll9w1+shhrdffxYwcsCgAA4ECQ4wMA7IXHfe26qUM4JKxapO7uj86OV9W3JDli4REB\nAAALIccHAGAzWrdP6qo6uao+mOTDSd6a5CNJ/nbBcQEAAAsixwcAYDOZ58GJz0tyzyQf6O7jkzww\nHqoCAABbmRwfAIBNY54i9Ve7+1NJDquqw7r7zUnutuC4AACAxZHjAwCwaaz14MQln66qmyf5xyR/\nVlWfSLJnsWEBAAALJMcHAGDTmOdK6ocn+WKSX07yd0k+lOTHFxkUAACwUPuc41fVQ6rqsqq6vKqe\nucL8p1TVe6vqwqr6p6o6cUMjBwDgoLNukbq7v5DkqCQPS3Jtkr8cbw0EAAC2oH3N8atqW5KXJHlo\nkhOTPGaFIvSfd/dduvtuSc5M8qINDR4AgIPOukXqqnpykn9N8pNJHpXkHVX1pEUHBgAALMZ+5Pgn\nJbm8u6/o7q8kOTvDVdnX6+7PzozeLElvTNQAABys5umT+hlJ7r50ZUVV3SbJPyd5+SIDAwAAFmZf\nc/zbJblyZnxXku9fvlBV/UKSpyU5PMkDVlpRVZ2a5NQkuf3tb7+X4QMAcDCZp0/qXUk+NzP+udww\nMQWATaVv2rnuZtelb+riPYBV7GuOXytM+4adbXe/pLv/Q5L/kuTZK62ou8/q7h3dveOoo46a46MB\nADhYrXoldVU9bRy8Ksk7q+pvMiSgD89wayAAbEpfvfdXpw4BYFPagBx/V5JjZ8aPSXL1GsufneR/\n7kOoAAAcQtbq7uMW488Pja8lf7O4cAAAgAXa3xz//CQnVNXxGQrdpyR57OwCVXVCd39wHP3RJB8M\nAACsYdUidXf/xux4Vd1imNyfX3hUAADAhtvfHL+791TVaUnOS7Itycu7+5Kqem6Snd19TpLTquqH\nk3w1yb8lecKGfgkAAA466z44sarunORVSW49jn8yyeO7+5IFxwYAACzA/uT43X1uknOXTTtjZviX\nNjZaAAAOdvM8OPGsJE/r7jt09x2S/EqSl82z8qp6SFVdVlWXV9UzV5j/lKp6b1VdWFX/VFUn7l34\nAADAPtjnHB8AADbaPEXqm3X3m5dGuvstSW623puqaluSlyR5aJITkzxmhSL0n3f3Xbr7bknOTPKi\neQMHAAD22T7l+AAAsAjzFKmvqKpfq6rjxtezk3x4jvedlOTy7r6iu7+S4cneD59doLs/OzN6swxP\nFgcAABZrX3N8AADYcPMUqZ+U5KgkrxtfRyb5mTned7skV86M7xqn3UBV/UJVfSjDldRPXWlFVXVq\nVe2sqp3XXHPNHB8NbBZHHnFdvvUme3LkEddNHQoA8HX7muMDAMCGW/PBiWOXHf+1u1csHq+jVpj2\nDVdKd/dLkrykqh6b5NlZ4enf3X1Whn7zsmPHDldbwxby9Lt+euoQAIAZ+5njAwDAhlvzSuru/lqS\ne+zjunclOXZm/JgkV6+x/NlJfmIfPwsAAJjDfub4AACw4da8knr07qo6J8lrknxhaWJ3v26d952f\n5ISqOj7JVUlOSfLY2QWq6oTu/uA4+qNJPhgAAGDR9jXHBwCADTdPkfrWST6V5AEz0zpD33Wr6u49\nVXVakvOSbEvy8u6+pKqem2Rnd5+T5LSq+uEkX03yb1mhqw8AAGDD7VOOD3zdx557l6lDmMyea2+d\nZHv2XPvRQ/L3cPsz3jt1CAAHnXmK1M/o7k/uy8q7+9wk5y6bdsbM8C/ty3oBAID9ss85PgAAbLRV\n+6Suqh+vqmuSXFRVu6rqBw5gXAAAwAaT4wMAsBmt9eDE5yf5we7+tiSPTPLfD0xIAADAgsjxAQDY\ndNYqUu/p7vcnSXe/M8ktDkxIAADAgsjxAQDYdNbqk/pbquppq41394sWFxYAALAAcnwAADadtYrU\nL8sNr6xYPg4AAGwtcnwAADadVYvU3f0bBzIQAABgseT4AABsRmv1SQ0AAAAAAAulSA0AAAAAwGQU\nqQEAAAAAmMyqfVIve+r3N/DkbwAA2Frk+AAAbEarFqnjKd8AAHCwkeMDALDprFqk9uRvAAA4uMjx\nAQDYjNa6kjpJUlVHJPnZJN+d5Iil6d39pAXGBQAALIgcHwCAzWSeBye+KsnRSX4kyVuTHJPkc4sM\nCgAAWCg5PgAAm8Y8Reo7dfevJflCd/9pkh9NcpfFhgUAACyQHB8AgE1jniL1V8efn66qOyf55iTH\nLSwiAABg0eT4AABsGuv2SZ3krKq6VZJfS3JOkpuPwwAAwNYkxwcAYNOYp0j9J939tQx91d1xwfEA\nAACLJ8cHAGDTmKe7jw9X1VlV9cCqqoVHBAAALJocHwCATWOeIvV3JPmHJL+Q5CNV9eKqus9iwwIA\nABZIjg8AwKaxbpG6u7/Y3X/Z3T+Z5G5JvinDbYEAAMAWJMcHAGAzmedK6lTV/arqD5K8K8kRSf7j\nQqMCAAAWSo4PAMBmse6DE6vqw0kuTPKXSZ7R3V9YeFQAAMDCyPEBANhM1i1SJ/me7v7swiMBAAAO\nFDk+AACbxqpF6qo6vbvPTPL8qurl87v7qQuNDAAA2FByfAAANqO1rqR+3/hz54EIBAAAWDg5PgAA\nm86qRerufv04eFF3v/sAxQMAACyIHB8AgM3osDmWeVFVvb+qnldV373wiAAAgEWT4wP77Mgjrsu3\n3mRPjjziuqlDAeAgse6DE7v7h6rq6CT/MclZVfVNSV7d3f9t4dEBAFvOW+97v6lDmMwXt29LqvLF\nXbsOyd/D/d721qlDYE5yfGB/PP2un546BAAOMvNcSZ3u3t3dv5fkKUkuTHLGQqMCAAAWSo4PAMBm\nsW6Ruqq+q6qeU1UXJ3lxkn9OcszCIwMAABZCjg8AwGaybncfSf4kyV8keXB3X73geAAAgMWT4wMA\nsGmseSV1VW1L8qHu/l3JKwAAbH37m+NX1UOq6rKquryqnrnC/KdV1aVVdVFVvamq7rAhgQMAcNBa\ns0jd3V9LcpuqOvwAxQMAACzQ/uT4Y4H7JUkemuTEJI+pqhOXLfbuJDu6+65JXpvkzP0MGQCAg9w8\n3X18NMnbq+qcJF9YmtjdL1pYVAAAwCLta45/UpLLu/uKJKmqs5M8PMmlM+t488zy70jyuI0KGgCA\ng9M8Reqrx9dhSW6x2HAAAIADYF9z/NsluXJmfFeS719j+Z9N8rcrzaiqU5OcmiS3v/3t9yIEAAAO\nNusWqbv7Nw5EIAAAwIGxHzl+rbS6FReselySHUnut0oMZyU5K0l27Nix4joAADg0rFukrqo3Z4XE\ns7sfsJCIAACAhdqPHH9XkmNnxo/JcEX28vX/cJJfTXK/7v7yfoQKAMAhYJ7uPp4+M3xEkkcm2TPP\nyqvqIUl+N8m2JH/U3b+5bP7Tkjx5XN81SZ7U3R+dZ90AAMA+29cc//wkJ1TV8UmuSnJKksfOLlBV\nd0/yh0ke0t2f2JhwAQA4mM3T3ccFyya9vareut77Zp78/aAMV1ycX1XndPelM4stPfn736vq5zI8\n+fvRc0cPAADstX3N8bt7T1WdluS8DBeivLy7L6mq5ybZ2d3nJHlhkpsneU1VJcnHuvvkjf0GAAAc\nTObp7uPWM6OHJblHkqPnWLcnfwMAwCa0Hzl+uvvcJOcum3bGzPAPb0SMAAAcOubp7uOCDP3VVYZb\nAD+c4Snd6/HkbwAA2Jz2NccHAIANN093H8fv47o9+RsAADah/cjxAQBgwx222oyq+r6qOnpm/PFV\n9TdV9XvLbg9czd4++ftkT/4GAIDF2YAcHwAANtyqReoMT+T+SpJU1X2T/GaSVyb5TMarmtdx/ZO/\nq+rwDE/+Pmd2gZknf5/syd8AALBw+5vjAwDAhluru49t3X3tOPzoJGd1918l+auqunC9FXvyNwAA\nbDr7leMDAMAirFmkrqrt3b0nyQMzPrhwjvddz5O/AQBgU9nvHB8AADbaWonoXyR5a1V9MskXk/xj\nklTVnTLcDggAAGwtcnwAADadVYvU3f38qnpTktsm+fvu7nHWYUl+8UAEBwAAbBw5PgAAm9Gat/R1\n9ztWmPaBxYUDAAAskhwfAIDN5rCpAwAAAAAA4NClSA0AAAAAwGQUqQEAAAAAmIwiNQAAAAAAk1Gk\nBgAAAABgMorUAAAAAABMRpEaAAAAAIDJKFIDAAAAADAZRWoAAAAAACajSA0AAAAAwGQUqQEAAAAA\nmIwiNQAAAAAAk1GkBgAAAABgMorUAAAAAABMRpEaAAAAAIDJKFIDAAAAADAZRWoAAAAAACajSA0A\nAAAAwGQUqQEAAAAAmIwiNQAAAAAAk1GkBgAAAABgMorUAAAAAABMRpEaAAAAAIDJKFIDAAAAADAZ\nRWoAAAAAACajSA0AAAAAwGQUqQEAAAAAmIwiNQAAAAAAk1GkBgAAAABgMorUAAAAAABMRpEaAAAA\nAIDJKFIDAAAAADAZRWoAAGBuVfWQqrqsqi6vqmeuMP++VfWuqtpTVY+aIkYAALYWRWoAAGAuVbUt\nyUuSPDTJiUkeU1UnLlvsY0memOTPD2x0AABsVdunDgAAANgyTkpyeXdfkSRVdXaShye5dGmB7v7I\nOO+6KQIEAGDrWeiV1G4FBACAg8rtklw5M75rnLbXqurUqtpZVTuvueaaDQkOAICtaWFFarcCAgDA\nQadWmNb7sqLuPqu7d3T3jqOOOmo/wwIAYCtbZHcfbgUEAICDy64kx86MH5Pk6oliAQDgILHI7j7c\nCggAAAeX85OcUFXHV9XhSU5Jcs7EMQEAsMUtskjtVkAAADiIdPeeJKclOS/J+5L8ZXdfUlXPraqT\nk6Sqvq+qdiX5qSR/WFWXTBcxAABbwSK7+3ArIAAAHGS6+9wk5y6bdsbM8PkZcn8AAJjLIq+kdisg\nAAAAAABrWliR2q2AAAAAAACsZ5HdfbgVEAAAAACANS20SA0AcCi5ZfcNfgIAALA+RWoAgA3yuK9d\nN3UIAAAAW84iH5wIAAAAAABrUqQGAAAAAGAyitQAAAAAAExGkRoAAAAAgMkoUgMAAAAAMBlFagAA\nAAAAJqNIDQAAAADAZBSpAQAAAACYjCI1AAAAAACTUaQGAAAAAGAyitQAAAAAAExGkRoAAAAAgMko\nUgMAAAAAMBlFagAAAAAAJqNIDQAAAADAZBSpAQAAAACYjCI1AAAAAACTUaQGAAAAAGAyitQAAAAA\nAExGkRoAAAAAgMkoUgMAAAAAMBlFagAAAAAAJqNIDQAAAADAZBSpAQAAAACYjCI1AAAAAACTUaQG\nAAAAAGAyitQAAAAAAExGkRoAAAAAgMkoUgMAAAAAMBlFagAAAAAAJqNIDQAAAADAZBSpAQAAAACY\njCI1AAAAAACTUaQGAAAAAGAyitQAAAAAAExmoUXqqnpIVV1WVZdX1TNXmH/jqnr1OP+dVXXcIuMB\nAAD2jxwfAICNtrAidVVtS/KSJA9NcmKSx1TVicsW+9kk/9bdd0ry20lesKh4AACA/SPHBwBgERZ5\nJfVJSS7v7iu6+ytJzk7y8GXLPDzJn47Dr03ywKqqBcYEAADsOzk+AAAbbpFF6tsluXJmfNc4bcVl\nuntPks8kuc0CYwIAAPadHB8AgA23fYHrXulqid6HZVJVpyY5dRz9fFVdtp+xHaqOTPLJqYOYSv3W\nE6YO4VB26La9X3fh2IQO3XaXpJ6q7U3o0G17+3+x7B02IgwWSo6/+Ry6+5zI8Sd26LY9Of6UDt12\nFzn+xA7dtneAcvxFFql3JTl2ZvyYJFevssyuqtqe5JuTXLt8Rd19VpKzFhTnIaOqdnb3jqnj4NCj\n7TEF7Y6paHsc5OT4m4x9DlPR9piCdsdUtL3FW2R3H+cnOaGqjq+qw5OckuScZcuck2TpX9+PSvJ/\nu/sbrrIAAAA2BTk+AAAbbmFXUnf3nqo6Lcl5SbYleXl3X1JVz02ys7vPSfLHSV5VVZdnuLrilEXF\nAwAA7B85PgAAi7DI7j7S3ecmOXfZtDNmhr+U5KcWGQM34HZKpqLtMQXtjqloexzU5Pibjn0OU9H2\nmIJ2x1S0vQUrd94BAAAAADCVRfZJDQAAAAAAa1KkBgAAAABgMorUG6iqblJVb62qbeP4E6rqg+Pr\nCau859ZV9cZxmTdW1a3G6beqqr+uqouq6l+r6s4z73lIVV1WVZdX1TNnpv/ZOP3iqnp5Vd1onXjv\nVlX/UlWXjJ/z6Jl5x1fVO8e4Xj0+vX35+29TVW+uqs9X1Ytnpt+0qv5PVb1/XPdvzsy7/fied4+f\n+bBx+g9W1aVVdfE8v2u+brbdbaZtOkfc28b3vGFvYhyXe9bY/i+rqh+Zmf6fx/gurqq/qKojxumv\nqKoPV9WF4+tu4/RHj+t5w0qfw9qW7/PGad9UVVctaz/3qKr3jr/r36uqWmFdNc67fGxH3zsz78xx\nu75v9v1V9ZaxDSxt12+ZI+a7zvyNvHemjexXjGt897+rqveMn/fS+vrx4YVVtbuqnr5ezMxveZsc\n909/P7adS6vquHH6fu1rxnkr7cP+eNzeF1XVa6vq5uvEe6Oq+tOx7b2vqp41M2/FY/2y9994jP/y\n8fssfT/HVDjAVtj/zHMe8FPj8eG6qtqxbN5qx6tHj/uYS6rqzDnielBVXTCu44KqesDMvOdX1ZVV\n9fl11vEN+8Lx+15YVV+pqiPX/w2xUWr+3P+0cbv1Wttonra6bPkX1nBOcFEN56u3HKevekxb9v4V\nj5VVdd+qeldV7amqRy17zwvd4CoAAAAU2ElEQVRqyO8vXvYd/6yqrl2+PIuxF23vgeO2vLCq/qmq\n7rTCuk6qr+fw76mqR8zMe3lVfWJ5HlNV3zN+5nur6vVV9U3rxHtEDbWUpVz8N2bm1bgP/MDYXp+6\nyjq+NhPnOTPTtb1NYFmbvMN4nLtw3N5PmVnu8Ko6a9ze76+qR66wruOq6osz2/ulc3z+3arqHePy\nO6vqpHF61RrnjTPvX/EctA7lc8Xu9tqgV5JfSPJL4/Ctk1wx/rzVOHyrFd5zZpJnjsPPTPKCcfiF\nSX59HP7OJG8ah7cl+VCSOyY5PMl7kpw4zntYkhpff5Hk59aJ99uTnDAOf1uSjye55Tj+l0lOGYdf\nutK6ktwsyX2SPCXJi2em3zTJD43Dhyf5xyQPHcfPWlpXkhOTfGTmfccluXjq7bjVXsva3abapuvE\n/bQkf57kDTPT5onxxLHd3zjJ8ePfw7Ykt0vy4SQ3mVnXE8fhVyR51Cpx3H82Bq99a3sz03533K6z\n7edfk9xr3Df97VLbWfa+h43zKsk9k7xznP4DSd4+buNtSf4lyf3HeW9JsmMv4t2e5KIk3zOO3ybJ\ntv2NcZ3v/k3jz0ryV0vte5z2nCRPn3o7Hkyv5W1ybCMPGodvnuSm4/A+72tm5q+0D/ummeEXZTy+\nrxHvY5OcPQ7fNMlHMhwLVz3WL3v/zyd56Th8SpJXz8w7Lo6pXl4H7JV9Ow/4riTfsfx4ttrxavz5\nsSRHjdP/NMkD14nr7km+bRy+c5KrZubdM8ltk3x+jfevty/8SJIjp/79H0qvzJ/73308Fqy6jeZt\nq8ve8+Ak28fhF+Tr568rHtNWeP+Kx8ox1rsmeWVm8vYkP5rkjePfxc2S7Fy2jldklTzfa7K294Ek\n3zUO/3ySV6ywrpvOtKPbJvnEzPh9k3xvluUxSc5Pcr9x+ElJnrdOvJXk5uPwjZK8M8k9x/GfGdva\nYeP4t6yyjrX2j9rexK9lbfLwJDceh28+7oOWjn+/keS/jcOHrbRPzD7kzkn+Pl+vizwsyVtmhlc9\nb5x5/6rnoDlEzxVdSb2xfjrJ34zDP5Lkjd19bXf/W4YD60NWeM/DMySYGX/+xDh8YpI3JUl3vz/J\ncVX1rUlOSnJ5d1/R3V9Jcva4jnT3uT3K0NiPWSvY7v5Ad39wHL46w4HhqPG/Nw9I8toV4pp9/xe6\n+5+SfGnZ9H/v7jePw19J8q6ZWDrJ0n88vznJ1WvFyFyub3dbZZtW1TEZEs4/mpk2V4wZ2vvZ3f3l\n7v5wkssz/F0kQ/J6k6raniHx0b4Wa3afl6q6R5JvzXCwXpp22wwnEv8y7ptemdW36yvHXdg7ktxy\nfG8nOSJj0pEhwfx/+xjvg5Nc1N3vSZLu/lR3f20DYlzxu4+f8dlxcPv4HXofY2c+17fJqjoxw8nO\nG5Okuz/f3f++EfualfZh42d8dpxfSW6S9bd3J7nZuM+6SZKvJPls1jjWrxDjUg7x2iQPXLoCAzjg\n9vo8oLvf192XrbCuFY9XGf5x9YHuvmZc7h+SfMPVYMs+491jTpgklyQ5oqpuPM57R3d/fJ3vtVbe\nxTTWzf3H8Xd390fWWde856zX6+6/7+494+g7csNzgpWOacvfv+Kxsrs/0t0XJblu2VtOTPLW7t7T\n3V/I8E+TNWNkYeZqe5nj/HA8v1xqR0dkJmfq7rcluXaFz/+OJG8bh9+Y9fd/3d1Ld4rcaHwtfc7P\nJXlud183LvuJtdbFpjXbJr/S3V8ep984N+w54klJ/vu43HXd/ckN+vzV2vqq541L9uIc9JCiSL1B\narhV+I4zicDtklw5s8iucdpy37qUHI4/l25Xf0+SnxzXfVKSO2RIANZdbw3dfPynJH+3F/GflKGA\n8qEMV2l8euagsVrs86z3lkl+PGPBPcN/gx5XVbuSnJvkF/dlvQxWaHez8zbzNv2dJKfnhknovDGu\n+DfQ3Vcl+a0MVxh9PMlnunu2YPj88Vab3146OWPfLW97VXVYkv+R5BnLFr1dhm20ZG+3678keXOG\nbfrxJOd19/tmlvuT8faqX5ujOPftSbqqzhtvQTx9I2Jc47snSarqvAyJ++fy9cIoG2yF/eG3J/l0\nVb2uhm45XljDbfj7ta8Zh1fahy3F8SdJdme4C+r31wn7tUm+kKFtfyzJb3X3tet89ooxjt/nM+P3\nAw6g/TgPWM1qx6vLk3zneEvy9gwns8fuxXofmeTdMyfx89jf78IG2ovcf177u32flOHqv2T1Y9o3\n2Mtj5XuSPLSG7gePTPJD2bt2zwbYy7b35CTnjueH/ynJby5/z/i+76+qS5K8N8lTZnKz1Vyc5ORx\n+KcyRzsYu4G4MEMu/sbufuc46z8kefTYRcPfVtUJq6ziiHGZd1TVIV9A3ExWapNVdWxVXZRhv/aC\n7r56rF8kyfPGY+prxgtAV3L8eN7w1qr6wTnC+OUkL6yqKzPUIpa6OZpn3zrvOeghRZF64xyZ5NMz\n4ysVS/bmCrrfTHKrcYf6i0nenWTPnOv9gyRv6+5/nOeDxv/gvCrJz4z/Sdzf2JfWuz1DtyO/191X\njJMfk+F2n2My3ALxqrHAw75Z3u6SbO5tWlU/luQT3X3B8llzxrjicjX05/7wDLeifluGKzkeN85/\nVoYk+Psy3M74X1aLj7ktb3s/n+Tc7r5y2XL7u13vlOF26KV/0j2gqu47zv/p7r5Lkh8cX/9pnZi3\nZ+jO5qfHn4+oqgfub4xZ/bsPC3T/SIbbGG+c4QpeFmN5m9yeoV08PcPf/h2TPDH73yZX24cNC3T/\nTIZ90PuSPHqlZWaclORr4/LHJ/mVqrrj/sa4zmcCG2+jzwNWPF6NV7r+XJJXZ+h67SMZzg/WVVXf\nnaFrhv9vL+JI7Gc2m3lz/3nt8/atql/N0P7+bJy02jHtGz9gL46V40Un5yb55wznIf+SOds9G2pv\n2t5/TvKw8fzwTzJ06/INuvud3f3dGfK0Z9XY9/4anpTkF6rqgiS3yHC1/pq6+2vdfbcM5xIn1def\n9XXjJF/q7h1JXpbk5aus4vbjMo9N8jtV9R/W+0wOmG9ok919ZXffNcmdkjxhLEZvz7D9397d35th\nH/JbK6zv4xm2990zdutX6/R7nuGY/J+7+9gM7f6Px+nz7FsdX1egOLhxvpjhNpUlu3LD/+wdk5W7\nHvh/M7eLL/XFlO7+bHf/zLhDfXyGW2c+vN56q+rXx2WfNk/Q4x/d/0ny7PE2hCT5ZIbbEbavE/t6\nzkrywe7+nZlpP5uhL9CMV0gekWHnwr5Z3u62wja9d5KTq+ojGW5hf0BV/a+9iHG1v4EfTvLh7r6m\nu7+a5HUZ+jNOd398vNXmyxkSJbep7r/lbe9eSU4bt+tvJXl8DQ/Y3JUbdj20t9v1EUne0UNXDZ/P\ncLXOPZNkvHo+3f25DH0Dr7ddd2W4XfST3f3vGU54vncDYlztu1+vu7+U5Jys3GUDG2Ol4/C7e+gy\nY0+S/51he+/vvma1fdj1ergt/9VZ5zbUDCc8f9fdXx1vM317kh1rfPaqMY7f55uz8u2xwGLt63nA\nalY7XqW7X9/d39/d90pyWZIPrreysYuiv07y+O7em6tsl2LZn+/Cxpo395/XPm3fGh6w+GMZLhhY\nKqqsdkxb0V4cK9Pdz+/uu3X3gzIUdtZt92y4udpeVR2VoT/9pSuWX53xnGw1412SX8jQb/5ay72/\nux/c3ffI8A+Lufdn3f3pDP3/L3UVsyvD82KSYf9411Xed/X484rx/Xef9zNZuG9ok0vG7XZJhgtW\nPpXk3zNs5yR5TcZj6rL3fLm7PzUOX5ChfX37OjE8IUPdYWm9S+ej8+xb5z0HPaQoUm+Q8cqGbTP/\n/TsvyYOr6lbjFZ4PHqctd06Ghp3x51Jfmrccb19Ihttl3tZD/13nJzmhqo4f558yriNV9eQM/Yo9\nZvY/6DU8OfeVyz94fP9fZ+gr5zUz36Uz3F6/9KTa6+OaV1X9twwny7+8bNbHkjxwXOa7MuxUrgn7\nZHm720zbtKpuV1VvWrZsuvtZ3X1Mdx+Xof3+3+5+3F7EeE6SU6rqxlV1fJITMvTB/rEk9xxvBawx\npveNcS39I6gy3Bp78QrrZS8sb3vd/dPdfftxuz49Qxt8Zg/dGH2uqu45/v4fn9W36+NrcM8M3bUs\n3S56v6raXkNXRvdL8r5x/Mjk+i6Ofizjdq2qR1TVf1/hM85LctexjWwf13Xp/sa42nevqpvPtL3t\nGe40eP9e/JrZCysch8/PcEfSUv+ID8iwvfdrX7PaPmxsF3dKrt/X/HjG7b1Gm/xYhiJ3VdXNMvwD\n5v1Z41i/QoxLOcSjxlgO+Ssw4EDbj/OA1ax4vEqSqvqW8eetMtzJ80fj+Ir7mRpuc/4/SZ7V3W/f\nh6+3Wt7FBObN/ffCqm21ql5ZQzcON1BVD8lwV+LJ4z9Rlqx2TJt976rHytXU0F3Dbcbhu2YoJv79\nWu9h4+1F2/u3JN9cVUvFvQdlPCebNeY428fhO2Tob/oja8Uws/87LMmzMzz8Oqudd1bVUeM+MFV1\nkwwXNS21t/+dr9/heL8MD3tc/v5b1dhN5Hjece+M+2Kmt0KbPGbczkvHyHsnuWzMjV+f5P7jWx+Y\nFbbj2F62jcN3zHC8u2IcX3F/mKGofL9x+AH5+j/QVju3nY1/3nPQQ0tvgqc3HiyvDJf2//DM+JMy\n9B13eYbbX5am/1HGJ3hn6DvyTRka85uS3Hqcfq9x2vsz/GfmVjPvf1iGneiHkvzqzPQ947QLx9cZ\n4/RHJfnDFeJ9XJKvzix/YZK7jfPumCEBvTzDf4SWnpJ6coYHDCyt4yMZrtr6fIb/BJ2Y4T9AneFg\ntLTeJ4/Ln5jhv+rvGac/eGZdx2Uvn6bqdcN2t5m2aYYrJ85bJ/b7J3nDzPi8Mf7q2NYvyw2fgPsb\n49/MxRluO1t6///N0NfZxUn+V8anPK8Ug9e+tb1l05+Y5MUz4zvG3/2Hkrw4SY3Tn5Kh/7lkuCrm\nJeMy783X95Hbkvzh2PYuTfKicfrNklyQ5KIM/yX/3STbxnlPz3AyvlLMjxuXvzjJmRsR42rfPcOD\nFM+fifH3Mz61fJz/nByCT2w+kG0yw4nRReP2ekWSw8fp+7WvmZl//f4jwz/+3z6zr/mzDA9DWbVN\nZnjy+GvG9nFpkmfMzFvtWP/cDIWBZPin4GvG7/GvGfrlW1ruuDimenkdsNcK+595zgMekSHX+nKG\nhwKfN7Pcaservxj3F5cmOWVm+mr7mWdnuEJxNjf8lnHemePnXzf+fM44fe59YYa88cipf/+H0ivz\n5/5PHbfrngyFlD8ap+9YGl6nrV6Y5NgVPv/yDH2tLn3eS8fpax3Tzs3Qvcdax8rvG+P9QoYrHy8Z\npx8x0+bfsfT9Ztb9iiSPmnq7HAqvvWh7jxi38XsyXH18x3H69fuWDN30XTK+711JfmLmc/4iQ9cL\nXx3bxM+O038pQ270gQzdoy7l6yued2b4h8a7M+SCF2esj4zzlv6B994M3T98z/K/jwxXgC99j/cu\nxaHtbZ7Xsja5lPe/Z/x56sxyd8jw0M2LMtTdbr9Cm3zk2CbfM7bJH595/2r7w/tkOCd9T5J3JrnH\nOH3V88YkF84Mr3gOOs57Tg7Bc8WlP2o2QFXdPcnTunu9flEPqKp6YZJX9fC05E2rqo7LcLK/5m0+\n3NAmbnenJflYd6909d+mUVX3z7Dz/7GpY9lqNnHb+18Z+gbb1HdpVNVzkny+u1fqE419oE3e4DOP\ni2MqHDBT73+mOvbV0PXRju7+5IH83EPZgWhrNXTj8Mfd/VOL+oyNUlWvyHC883DqBZt6P7eaqc47\ntb3pHcz7w0P1XFF3Hxuou9+d5M1LtwhsFt39jC1QoP7BDLdgSHD30iZudy/eAgXqR2d40Oi/TR3L\nVrSJ297jtkCB+oUZrkD5wtSxHEy0yYFjKhx4U+9/JtjP3KSGB7zfKMOV2BwgB6Kt9fB8pK1QoP6z\nDLfaf2nqWA4FU+/nVjPFeae2tzkcrPvDQ/lc0ZXUAAAAAABMxpXUAAAAAABMRpEaAAAAAIDJKFID\nAAAAADAZRWqADVRVj6iqrqrv3I91vKKqPlxVF1bV+6vq1zcwvrdU1Y6NWh8AABzs5PgAi6dIDbCx\nHpPkn5Kcsp/reUZ33y3J3ZI8oaqO3+/IAACAfSHHB1gwRWqADVJVN09y7yQ/mzGBrarDquoPquqS\nqnpDVZ1bVY8a592jqt5aVRdU1XlVddsVVnvE+PML43vOqKrzq+riqjqrqmqc/paqekFV/WtVfaCq\nfnCcfpOqOruqLqqqVye5yWJ/CwAAcPCQ4wMcGIrUABvnJ5L8XXd/IMm1VfW9SX4yyXFJ7pLkyUnu\nlSRVdaMkv5/kUd19jyQvT/L8mXW9sKouTLIrydnd/Ylx+ou7+/u6+84ZktEfm3nP9u4+KckvJ1m6\nffDnkvx7d991XP89Nvg7AwDAwUyOD3AAbJ86AICDyGOS/M44fPY4fqMkr+nu65Lsrqo3j/O/I8md\nk7xxvFBiW5KPz6zrGd392vHKjTdV1Q909z8n+aGqOj3JTZPcOsklSV4/vud1488LMiTNSXLfJL+X\nJN19UVVdtIHfFwAADnZyfIADQJEaYANU1W2SPCDJnauqMySkneSvV3tLkku6+15rrbe7P19Vb0ly\nn6p6V5I/SLKju6+squfk67cKJsmXx59fyw33772XXwcAAA55cnyAA0d3HwAb41FJXtndd+ju47r7\n2CQfTvLJJI8c+6371iT3H5e/LMlRVXX9rYFV9d3LV1pV25N8f5IP5evJ6ifHqy8eNUdcb0vy0+O6\n7pzkrvv6BQEA4BAjxwc4QBSpATbGY/KNV1T8VZJvy9Dn3MVJ/jDJO5N8pru/kiEBfUFVvSfJhUl+\nYOa9S/3VXZTkvUle192fTvKycfx/Jzl/jrj+Z5Kbj7cAnp7kX/ft6wEAwCFHjg9wgFS3O0QAFqmq\nbj7e0nebDAnkvbt799RxAQAA+0aOD7Cx9EkNsHhvqKpbJjk8yfMkrwAAsOXJ8QE2kCupAQAAAACY\njD6pAQAAAACYjCI1AAAAAACTUaQGAAAAAGAyitTA/9+OHQsAAAAADPK3HsaewggAAAAANpIaAAAA\nAIBN1GlJw94mscIAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "18e7da126cb47ff98571511d2d00ed3f81eeb74a"
      },
      "cell_type": "markdown",
      "source": "Grouping the age into different buckets does seem to result in a more useful feature which can be used in our model, but i am not quiet convinced with the grouing. This is where apart from knowledge on Data Science concepts, one should also have the domain knowledge. From looking at the dataset, it looks like infant are likely to survive, then followed by young child. People older than 60 have the worst survival chance.\nso instead of using the pandas function, i would customize my age group like below and lets see how the chart looks after that"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "199dadb42193b031bcadcd26a9b6535ae3fb3b10"
      },
      "cell_type": "code",
      "source": "#Group age into 4 buckets\nallset['AgeBand']=''\nallset.loc[allset['Age']<=1,'AgeBand']='Infant'\nallset.loc[(allset['Age']>1) & (allset['Age']<=10),'AgeBand']='YoungChild'\nallset.loc[(allset['Age']>10) & (allset['Age']<=60),'AgeBand']='Adults'\nallset.loc[allset['Age']>60,'AgeBand']='Seniors'\n\n#plot bar chart to show the results of average survival\nChart, items =plt.subplots(1,1,figsize=(15,5))\nCAgeCut = sns.barplot(x=\"AgeBand\",y=\"Survived\",data=allset,order=[\"Infant\", \"YoungChild\", \"Adults\", \"Seniors\"])\nCAgeCut = CAgeCut.set_ylabel(\"Survival Probability\")\n",
      "execution_count": 109,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<matplotlib.figure.Figure at 0x7f80c5575fd0>",
            "image/png": "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\nrp+Z9ex19zVV9eQkJyXZM8kbuvvcqnpBkq3dvSXJ65O8paouyKRH7zGzqgcAAGA9meUwznT3iUlO\nnLfu2DnPv5fkt2dZA2vCkFtYGecQrIxzCFbGOTQSZdQkAADA+Mxyzh4AAABrRNgDAAAYIWGPRVXV\nd6bY595VdW5VnVlVP7WM13hCVf388iqEXaMmPlZVD56z7tFV9YFd9Po3qarXVdWXhvPtlKr6laq6\nbVWducgxL6qq+w/PP1ZVd1lgnydV1V/Pun5Yrqp6RFV1Vf3SItvfVFWP2kkbT6iqVw7PH15Vd5hF\nrbA7qapnDZ8XZw3/o919GW1sqqqXz6I+dp2ZXqCFdeGxSf6yu9+4zOOfkOScXPcejLDb6O6uqv+R\n5J1VdXImVxh+UZIH7aIS3pDk80luO9Ry2ySHJPnmYgd097N2UW0wS0cn+VgmV+t+3iq09/Ak70vy\nuVVoC3ZLVXXPJL+Z5G7d/f2q2i/JXte3ne7emmTr9XjdDd19zfV9HWZLzx47VVX3G3oS3lVVX6iq\ntw49HU9K8ugkxw7r9qmqD1XVp6vq7Ko6ajj+oKr6/NAzcW5VfbCqfmr4NnZTkrcut2cQdpXuPifJ\nvyT530mem+TN3f2lqtpcVecMP09Jkvk9blX1zKp69vD8Y1X14qr6VFWdV1X3GtbfuKreXVWfraq3\nVdXWqrpLVd0uyV2SPHfHfUi7+4Lufv/Q/Iaqev1wbr2/qvYe2vuHqnr4/Pcx9OadX1WnJLnHjH5d\nsGJVtU+SI5I8McOtmYbPnldW1eeq6v8l+dk5+395+Kd2R4/EKfPau1eShyV56fCZ81+r6qlDW2dV\n1Qm76K3BrN0yyeXd/f0k6e7Lu/vSqjqsqk6tqjOq6qSqumWSDP/jvWT4XDq/qu49rL9fVb1veH7z\nqnrvcK6cVlV3HtY/r6qOr6oPJnlzVd1xaOfMYd9D1uZXwA569pjWXZPcMZMeuI8nOaK7/66qjkzy\nvu5+V1VtSPKI7v6P4QP3tKraMhx/SJKju/sPq+odSR7Z3f9Qk3sxPn349gh2d89P8ukkP0iyqaoO\nz6R3+/BMevs+VVWnJvnuTtqp7j68qh6W5NhMegifkmR7dz+yqn55eJ1kct59pruvXaSt22Vybp1d\nVe/JpOdiwX9aq+qAJM9JcrckVyb5SJLTpnjfsBYenuQD3X1+VV1RVXdLclAmf/N3SvJzmfTQvWGa\n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\n/wMMokRXVhKC0QAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "0a23f1fb900e1fa460b9dfb1f13ce1f1cc282e4c"
      },
      "cell_type": "markdown",
      "source": "Now this makes more sense. We can use this feature in our model. \nI did notice the feature embarked also had 2 empty values. I wouldnt bother doing a detailed analysis to arrive at the missing value since its just two values. So lets just fill this empty cells with the highest occuring value in the whole dataset\n"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "2457282c91db6949486e35cf719209d903f3fad4"
      },
      "cell_type": "code",
      "source": "print(\"Null Embarked values: \" , allset.Embarked.isnull().sum())\nHighestBoarding=allset.Embarked.mode()[0]\nprint(\"Highest Boarding Point\", HighestBoarding)\nallset['Embarked']=allset['Embarked'].fillna(HighestBoarding)\n",
      "execution_count": 110,
      "outputs": [
        {
          "output_type": "stream",
          "text": "Null Embarked values:  2\nHighest Boarding Point S\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "c1ff1f979d7d3f5d26149a73af541e7b3be14497"
      },
      "cell_type": "markdown",
      "source": "Alright, lets follow the same approach for Ticket, Sibsp and Parch. I will combine Sibsp and Parch to form Total Family feature. And for ticket i will use the first char to categorize tickets and check their survival probability on a chart.\n"
    },
    {
      "metadata": {
        "trusted": true,
        "scrolled": true,
        "_uuid": "a8f68847bf08dbb56694220361eb05582445e588"
      },
      "cell_type": "code",
      "source": "#Create a new feature to identify First Char of Ticket\nallset['TicketFirst']=allset['Ticket'].str.slice(0,1)\nChart, items =plt.subplots(1,1,figsize=(15,5))\n#Plot chart\nCTicket = sns.barplot(x=\"TicketFirst\",y=\"Survived\",data=allset)\nCTicket = CTicket.set_ylabel(\"Survival Probability\")",
      "execution_count": 111,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<matplotlib.figure.Figure at 0x7f80cc243ac8>",
            "image/png": "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\nAAAM0P8P+D5kHZpdbHoAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "collapsed": true,
        "_uuid": "99fdf5bd64f573546ce27700cd188ac66ce30557"
      },
      "cell_type": "markdown",
      "source": "Like for Age, i will group Tickets into three buckets based on the survival probability"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "f09ea81f860ddced260e20db9685c8cc767581fe"
      },
      "cell_type": "code",
      "source": "#Group Tickets into 3 buckets: High , Medium and Low\nallset.loc[(allset['TicketFirst']=='5') | (allset['TicketFirst']=='8') | (allset['TicketFirst']=='A')| (allset['TicketFirst']=='7')| (allset['TicketFirst']=='W')| (allset['TicketFirst']=='6')| (allset['TicketFirst']=='4'),'TicketBucket']='Low'\nallset.loc[(allset['TicketFirst']=='3') | (allset['TicketFirst']=='L') | (allset['TicketFirst']=='S')| (allset['TicketFirst']=='C'),'TicketBucket']='Medium'\nallset.loc[(allset['TicketFirst']=='2') | (allset['TicketFirst']=='F') | (allset['TicketFirst']=='1')| (allset['TicketFirst']=='P')| (allset['TicketFirst']=='9'),'TicketBucket']='High'\nChart, items =plt.subplots(1,1,figsize=(15,5))\n#Plot chart\nCTicketBucket = sns.barplot(x=\"TicketBucket\",y=\"Survived\",data=allset,order=[\"High\", \"Medium\", \"Low\"])\nCTicketBucket = CTicketBucket.set_ylabel(\"Survival Probability\")",
      "execution_count": 112,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<matplotlib.figure.Figure at 0x7f815bea61d0>",
            "image/png": "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\no9TdX0hyR1U9etJ1wmrWA+xWzktydndfPa//oiTPr6pKkqp6+KT/H5P8/KTvIZlb/jnf55I8oKru\nP1lq9ZODVA6MzaX5j/9G+fkk/zTZvizJjya5e7IK6cok/y1zIRBmJuwxZs9Nsr6qPpi5v9h/aZXr\nAXYD3b2pu/94gV0vTfIdSa6aPGzlpZP+P01y76q6KskZST68wDHvytz9w5cleWeSjw9RO7BHu1dV\nbZr6nJ7ktCS/PLm+/GKSFyTJZJn3zUk+NPnu+5McmLml4DCz6t7RyhTYM1XVvbv7K5PtM5N8V3e/\nYJXLAgCAXcJ9AozZ06vqxZn73/lNSU5e3XIAAGDXMbMHAAAwQu7ZAwAAGCFhDwAAYISEPQAAgBES\n9gDYo0zeZXfl5LO5qm6Zal+6g+9eUlXrduJcv15V95pqf6aqrp6c6+qqOn6Jv8Pjq+qdOzH+YVX1\nE0s5FwB7L0/jBGCP0t23JXlYklTV7yT5Snf/4UCn+/Ukf5nkq1N9T+juz1fV9yX5hyTvGOjc0x6W\nZF2SC3fBuQAYCTN7AIxGVX1lavuMyezbP1fVy+eN26eq3lBVvzdpP7WqPlhVH6mqt1XVvavqtCTf\nneTiqrp4gdPdJ8kXJt8/YvIi9m3Hf+EkiKaqHlxV757U8ZGq+p55tTyyqj5aVQ+qqgOq6ryqunzS\nd3xV7Ze5F7Y/ezKj+OwV+YcFwOiZ2QNgdKrqaUl+KsmjuvurVXW/qd37JnlTko9198uq6qAkL0ny\n5O6+s6p+I8np3X12VZ2eyUze1PcvrqpK8qAkPztDOW9K8vLu/tuq2j9zf2g9bFLnjyb5kyTHd/dn\nq+r3k7y3u59TVfdN8uEk705yVpJ13X3qkv+hALDXEfYAGKMnJ3l9d381Sbr79ql9f5bkrd39skn7\n0UmOTvKBuQyX/ZJ8cJFjb1vG+T1J3lNVl2xvYFUdmOSQ7v7bSR3/NulPkh9Isj7JU7v71slXnprk\nuKp64aS9f5LDZ/qNAWAeYQ+AMaokvZ19lyZ5QlX90SR8VZL/190n7swJuvtTVfW5zAXFW/Ott0bs\nP1XH9vzLZNzDJ9/fNv6Z3X39t/wyVY/amdoAIHHPHgDj9A9JnrPtSZrzlnH+ReYedPK2qto3yYeS\nPKaqHjwZe6+q+t7J2DuSHLjQCarqAUmOTHJTks8lecDkSaH3SPKTSdLdX06yqap+avKde0w93fOL\nSZ6e5Per6vGTvouSPH+yTDRV9fAd1QEA2yPsATA63f33STYk2VhVVyZ54bz9r0zykSTnJ7ktyclJ\n3lJVV2Uu/H3/ZOj6JO+a94CWiyfHvDjJmd39ue6+K3MPUbksyTuTfHxq/C8mOW1y7EuTHDxVx+eS\nPCPJuZPZu5cm+Y4kV00e+PLSbedMcrQHtACwM6p7e6tcAAAA2FOZ2QMAABghYQ8AAGCEhD0AAIAR\nEvYAAABGSNgDAAAYIWEPAABghIQ9AACAEfr/+CKRkEoUyUYAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "collapsed": true,
        "_uuid": "40080daf24df98499b0e45e6aed6082ba0f9b295"
      },
      "cell_type": "markdown",
      "source": "Do the same for Family. I will categorize family into Single, SmallFamily and LargeFamily."
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "a3b05d51674f00c061ef252e4791feb66a7f9d33"
      },
      "cell_type": "code",
      "source": "\nallset['TotalFamily']=allset['SibSp'] + allset['Parch']\nallset['FamilyBucket']='Single'\nallset.loc[allset['TotalFamily']==0,'FamilyBucket']='Single'\nallset.loc[(allset['TotalFamily']>0) & (allset['TotalFamily']<=3),'FamilyBucket']='SmallFamily'\nallset.loc[allset['TotalFamily']>3,'FamilyBucket']='LargeFamily'\nChart, items =plt.subplots(1,1,figsize=(15,5))\n#Plot chart\nCFamilyBucket = sns.barplot(x=\"FamilyBucket\",y=\"Survived\",data=allset,order=[\"SmallFamily\", \"Single\", \"LargeFamily\"])\nCFamilyBucket = CFamilyBucket.set_ylabel(\"Survival Probability\")",
      "execution_count": 113,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<matplotlib.figure.Figure at 0x7f80cc359780>",
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA3sAAAFACAYAAAAF72WkAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4wLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvpW3flQAAH05JREFUeJzt3X+4b2VdJ/z3h4PEqGSTHKMHUEix\nIjONI+poiT/woaeESqdwKjUtnmZCahglm4wxnJqGZuwqpavINHVU0tI8eVE4Gjhmg3IQA0EpBJUD\nnQT8ETL+APnMH3sd/brde58ve+919jlrv17Xta+9ftzfe332OddZZ733fa+1qrsDAADAtByw0QUA\nAACw/oQ9AACACRL2AAAAJkjYAwAAmCBhDwAAYIKEPQAAgAkS9gAAACZI2AMAAJggYQ8AAGCCDtzo\nAu6pQw89tI866qiNLgMAAGBDXH755bd299Y9tdvvwt5RRx2VHTt2bHQZAAAAG6KqPj5PO9M4AQAA\nJkjYAwAAmCBhDwAAYIKEPQAAgAkS9gAAACZI2AMAAJggYQ8AAGCChD0AAIAJEvYAAAAmSNgDAACY\noAM3ugAYy1lnnZVdu3blsMMOy7nnnrvR5QAAwF4l7DFZu3btyk033bTRZQAAwIYwjRMAAGCChD0A\nAIAJEvYAAAAmSNgDAACYIGEPAABggoQ9AACACRL2AAAAJkjYAwAAmCBhDwAAYIJGDXtVdVJVXVtV\n11XVi5Zp82NVdU1VXV1VbxizHgAAgM3iwLE6rqotSc5LcmKSnUkuq6rt3X3NTJtjkvxyksd196er\n6gFj1QMAALCZjDmyd3yS67r7+u7+UpILkpyyqM3PJjmvuz+dJN39yRHrAQAA2DTGDHuHJ7lxZn3n\nsG3WQ5M8tKreW1WXVtVJI9YDAACwaYw2jTNJLbGtlzj+MUlOSHJEkvdU1cO6+zNf01HVaUlOS5IH\nPvCB618pAADAxIw5srczyZEz60ckuXmJNm/r7ju7+4Yk12Yh/H2N7j6/u7d197atW7eOVjAAAMBU\njBn2LktyTFUdXVUHJTk1yfZFbf48yROTpKoOzcK0zutHrAkAAGBTGC3sdfddSU5PclGSDyd5U3df\nXVXnVNXJQ7OLktxWVdckuTjJC7v7trFqAgAA2CzGvGcv3X1hkgsXbTt7ZrmTnDl8AQAAsE5Gfak6\nAAAAG0PYAwAAmCBhDwAAYIJGvWdvCo574Ws3ugRW6ZBbb8+WJJ+49XZ/j/uhy3/rWRtdAgDAfs3I\nHgAAwAQJewAAABMk7AEAAEyQsAcAADBBwh4AAMAECXsAAAATJOwBAABMkLAHAAAwQcIeAADABAl7\nAAAAEyTsAQAATJCwBwAAMEHCHgAAwAQJewAAABMk7AEAAEyQsAcAADBBwh4AAMAECXsAAAATJOwB\nAABMkLAHAAAwQcIeAADABAl7AAAAEyTsAQAATNCBG10AjOXug+7zNd8BAGAzEfaYrDuOeepGlwAA\nABvGNE4AAIAJEvYAAAAmSNgDAACYoFHDXlWdVFXXVtV1VfWiJfY/p6puqaoPDl8/M2Y9AAAAm8Vo\nD2ipqi1JzktyYpKdSS6rqu3dfc2ipn/S3aePVQcAAMBmNObI3vFJruvu67v7S0kuSHLKiMcDAABg\nMGbYOzzJjTPrO4dtiz29qq6sqj+tqiNHrAcAAGDTGDPs1RLbetH6XyQ5qrsfnuSdSV6zZEdVp1XV\njqraccstt6xzmQAAANMzZtjbmWR2pO6IJDfPNuju27r7i8PqHyY5bqmOuvv87t7W3du2bt06SrEA\nAABTMmbYuyzJMVV1dFUdlOTUJNtnG1TVt86snpzkwyPWAwAAsGmM9jTO7r6rqk5PclGSLUle1d1X\nV9U5SXZ09/YkZ1TVyUnuSvKpJM8Zqx4AAIDNZLSwlyTdfWGSCxdtO3tm+ZeT/PKYNQAAAGxGo75U\nHQAAgI0h7AEAAEyQsAcAADBBwh4AAMAECXsAAAATJOwBAABMkLAHAAAwQcIeAADABAl7AAAAEyTs\nAQAATJCwBwAAMEHCHgAAwAQJewAAABMk7AEAAEyQsAcAADBBwh4AAMAE7THsVdXD9kYhAAAArJ95\nRvZ+v6reX1X/rqq+afSKAAAAWLM9hr3ufnySn0hyZJIdVfWGqjpx9MoAAABYtbnu2evuf0jy4iS/\nlOQJSX63qj5SVT86ZnEAAACszjz37D28qn47yYeTPCnJ07r7O4fl3x65PgAAAFbhwDnavCLJHyb5\nj939+d0bu/vmqnrxaJUBAACwavNM43xLd79uNuhV1S8kSXe/brTKAAAAWLV5wt6zltj2nHWuAwAA\ngHW07DTOqnpmkn+T5Oiq2j6z65Akt41dGAAAAKu30j17f5vkH5McmuS/z2y/PcmVYxYFAADA2iwb\n9rr740k+nuSxe68cAAAA1sNK0zj/prsfX1W3J+nZXUm6u79x9OoAAABYlZVG9h4/fD9k75UDAADA\nelhpZO+bV/pgd39q/csBAABgPaz0gJbLszB9s5bY10m+bZSKAAAAWLOVpnEevTcLAQAAYP0s+1L1\nqvqO4fv3LvU1T+dVdVJVXVtV11XVi1Zo94yq6qrads9/BAAAABZbaRrnmUlOy9e+Y2+3TvKklTqu\nqi1JzktyYpKdSS6rqu3dfc2idockOSPJ++5B3QAAAKxgpWmcpw3fn7jKvo9Pcl13X58kVXVBklOS\nXLOo3UuTnJvkBas8DgAAAIssO41zt6o6uKrOrKq3VNWfVdUvVtXBc/R9eJIbZ9Z3Dttm+35kkiO7\n++17qOG0qtpRVTtuueWWOQ4NAACwue0x7CV5bZLvSvLyJK9IcmyS183xueWe4rmws+qAJL+d5D/s\nqaPuPr+7t3X3tq1bt85xaAAAgM1tpXv2dvv27v6emfWLq+rv5vjcziRHzqwfkeTmmfVDkjwsySVV\nlSSHJdleVSd39445+gcAAGAZ84zsXVFVj9m9UlWPTvLeOT53WZJjquroqjooyalJtu/e2d2f7e5D\nu/uo7j4qyaVJBD0AAIB1sOzIXlVdlYVpl/dK8qyq+sSw/qB8/UNWvk5331VVpye5KMmWJK/q7qur\n6pwkO7p7+8o9AAAAsForTeP8obV23t0XJrlw0bazl2l7wlqPBwAAwIKVXr3w8dn1qnpAknmewgkA\nAMAGm+fVCydX1T8kuSHJu5N8LMlfjlwXAAAAazDPA1pemuQxSf6+u49O8uTM94AWAAAANsg8Ye/O\n7r4tyQFVdUB3X5zkESPXBQAAwBrM8569z1TVfZO8J8nrq+qTSe4atywAAADWYp6RvVOSfD7JLyb5\nqyQfTfK0MYsCAABgbfY4stfdd1TVYUmOT/KpJBcN0zoBAADYR83zNM6fSfL+JD+a5BlJLq2q545d\nGAAAAKs3zz17L0zyyN2jeVV1/yR/m+RVYxYGAADA6s1zz97OJLfPrN+e5MZxygEAAGA9LDuyV1Vn\nDos3JXlfVb0tSWfhgS3v3wu1AQAAsEorTeM8ZPj+0eFrt7eNVw4AAADrYdmw192/NrteVYcsbO7P\njV4VAAAAazLP0zgfVlVXJPlQkqur6vKq+q7xSwMAAGC15nlAy/lJzuzuB3X3g5L8hyR/OG5ZAAAA\nrMU8Ye8+3X3x7pXuviTJfUarCAAAgDWb5z1711fVryZ53bD+k0luGK8kAAAA1mqesPfcJL+W5C3D\n+v9K8tOjVQQA+7Czzjoru3btymGHHZZzzz13o8sBgGWtGPaqakuS/9jdZ+ylegBgn7Zr167cdNNN\nG10GAOzRivfsdfeXkxy3l2oBAABgncwzjfOKqtqe5M1J7ti9sbvfsvxHAAAA2EjzhL1vTnJbkifN\nbOt89R4+AAAA9jHzhL0Xdveto1cCAADAuln2nr2qelpV3ZLkyqraWVX/ai/WBQAAwBqs9ICWX0/y\nfd39/yR5epL/sndKAgAAYK1WCnt3dfdHkqS735fkkL1TEgAAAGu10j17D6iqM5db7+6XjVcWAAAA\na7FS2PvDfO1o3uJ1AAAA9lHLhr3u/rW9WQgAAADrZ6V79gAAANhPCXsAAAATJOwBAABM0LL37C16\nEufXmedpnFV1UpLfSbIlySu7+zcX7f+5JD+f5MtJPpfktO6+Zo66AQAAWMFKT+Nc05M3q2pLkvOS\nnJhkZ5LLqmr7ojD3hu7+/aH9yUleluSktRwXAACAcZ/GeXyS67r7+iSpqguSnJLkK2Gvu/95pv19\nkvQajwmwX/jEOd+90SWwSnd96puTHJi7PvVxf4/7oQeefdVGlwCw16w0spckqaqDkzwvyXclOXj3\n9u5+7h4+eniSG2fWdyZ59BL9/3ySM5MclORJy9RwWpLTkuSBD3zgnkoGAADY9OZ5QMvrkhyW5P9N\n8u4kRyS5fY7P1RLbvm7krrvP6+4HJ/mlJC9eqqPuPr+7t3X3tq1bt85xaAAAgM1tnrD3kO7+1SR3\ndPdrkvxgknnmrexMcuTM+hFJbl6h/QVJfniOfgEAANiDecLencP3z1TVw5LcL8lRc3zusiTHVNXR\nVXVQklOTbJ9tUFXHzKz+YJJ/mKNfAAAA9mCP9+wlOb+q/mWSX81CWLvvsLyi7r6rqk5PclEWXr3w\nqu6+uqrOSbKju7cnOb2qnpKFQPnpJM9e5c8BAADAjHnC3qu7+8tZuF/v2+5J5919YZILF207e2b5\nF+5JfwAAAMxnnmmcN1TV+VX15Kpa6qErAAAA7GPmCXvfnuSdSX4+yceq6hVV9fhxywIAAGAt9hj2\nuvvz3f2m7v7RJI9I8o1ZmNIJAADAPmqekb1U1ROq6veSfCALL1b/sVGrAgAAYE32+ICWqrohyQeT\nvCnJC7v7jtGrAgCATeSss87Krl27cthhh+Xcc8/d6HKYiHmexvk93f3Po1cCAACb1K5du3LTTTdt\ndBlMzLJhr6rO6u5zk/x6VfXi/d19xqiVAQAAsGorjex9ePi+Y28UAgAAwPpZNux1918Mi1d29xV7\nqR4AAADWwTxP43xZVX2kql5aVd81ekUAAACs2Tzv2XtikhOS3JLk/Kq6qqpePHZhALAvOvTgu/Mt\n/+KuHHrw3RtdCgCsaJ6ncaa7dyX53aq6OMlZSc5O8p/HLAwA9kUvePhnNroEAJjLHkf2quo7q+ol\nVfWhJK9I8rdJjhi9MgAAAFZtnpG9Vyd5Y5KndvfNI9cDAADAOlgx7FXVliQf7e7f2Uv1AAAAsA5W\nnMbZ3V9Ocv+qOmgv1QMAAMA6mGca58eTvLeqtie5Y/fG7n7ZaFUBAACwJvOEvZuHrwOSHDJuOQAA\nAKyHPYa97v61vVEIAAAA62ePYW94t14v3t7dTxqlIgAAANZsnmmcL5hZPjjJ05PcNU45AAAArId5\npnFevmjTe6vq3SPVAwAAwDqYZxrnN8+sHpDkuCSHjVYRAAAAazbPNM7Ls3DPXmVh+uYNSZ43ZlEA\nAACszTzTOI/eG4UAAACwfg5YbkdVPaqqDptZf1ZVva2qfnfR1E4AAAD2McuGvSR/kORLSVJV35/k\nN5O8Nslnk5w/fmkAAACs1krTOLd096eG5R9Pcn53/1mSP6uqD45fGgAAAKu10sjelqraHQafnOSv\nZ/bN82AXAAAANshKoe2NSd5dVbcm+XyS9yRJVT0kC1M5AQAA2EctG/a6+9er6l1JvjXJO7q7h10H\nJHn+3igOAACA1VlxOmZ3X7rEtr8frxwAAADWw0r37K1ZVZ1UVddW1XVV9aIl9p9ZVddU1ZVV9a6q\netCY9QAAAGwWo4W9qtqS5LwkP5Dk2CTPrKpjFzW7Ism27n54kj9Ncu5Y9QAAAGwmY47sHZ/kuu6+\nvru/lOSCJKfMNujui7v7/wyrlyY5YsR6AAAANo0xw97hSW6cWd85bFvO85L85VI7quq0qtpRVTtu\nueWWdSwRAABgmsYMe7XEtl5iW6rqJ5NsS/JbS+3v7vO7e1t3b9u6des6lggAADBNY74cfWeSI2fW\nj0hy8+JGVfWUJL+S5And/cUR6wEAANg0xhzZuyzJMVV1dFUdlOTUJNtnG1TVI5P8QZKTu/uTI9YC\nAACwqYwW9rr7riSnJ7koyYeTvKm7r66qc6rq5KHZbyW5b5I3V9UHq2r7Mt0BAABwD4w5jTPdfWGS\nCxdtO3tm+SljHh8AAGCzGvWl6gAAAGwMYQ8AAGCChD0AAIAJEvYAAAAmSNgDAACYIGEPAABggoQ9\nAACACRL2AAAAJkjYAwAAmCBhDwAAYIIO3OgCAABYH497+eM2ugRW6aDPHJQDckBu/MyN/h73Q+99\n/ns3uoQlGdkDAACYIGEPAABggoQ9AACACRL2AAAAJkjYAwAAmCBhDwAAYIKEPQAAgAkS9gAAACZI\n2AMAAJggYQ8AAGCChD0AAIAJEvYAAAAmSNgDAACYIGEPAABggoQ9AACACRL2AAAAJkjYAwAAmCBh\nDwAAYIKEPQAAgAkS9gAAACZI2AMAAJigUcNeVZ1UVddW1XVV9aIl9n9/VX2gqu6qqmeMWQsAAMBm\nMlrYq6otSc5L8gNJjk3yzKo6dlGzTyR5TpI3jFUHAADAZnTgiH0fn+S67r4+SarqgiSnJLlmd4Pu\n/tiw7+4R6wAAANh0xpzGeXiSG2fWdw7b7rGqOq2qdlTVjltuuWVdigMAAJiyMcNeLbGtV9NRd5/f\n3du6e9vWrVvXWBYAAMD0jRn2diY5cmb9iCQ3j3g8AAAABmOGvcuSHFNVR1fVQUlOTbJ9xOMBAAAw\nGC3sdfddSU5PclGSDyd5U3dfXVXnVNXJSVJVj6qqnUn+dZI/qKqrx6oHAABgMxnzaZzp7guTXLho\n29kzy5dlYXonAAAA62jUl6oDAACwMYQ9AACACRL2AAAAJmjUe/YAAIA963t37s7d6Xuv6rXUsCRh\nDwAANtidj7tzo0tggkzjBAAAmCBhDwAAYIKEPQAAgAkS9gAAACZI2AMAAJggYQ8AAGCChD0AAIAJ\nEvYAAAAmSNgDAACYIGEPAABggoQ9AACACRL2AAAAJkjYAwAAmCBhDwAAYIKEPQAAgAkS9gAAACZI\n2AMAAJggYQ8AAGCChD0AAIAJEvYAAAAmSNgDAACYIGEPAABggoQ9AACACRL2AAAAJkjYAwAAmCBh\nDwAAYIJGDXtVdVJVXVtV11XVi5bY/w1V9SfD/vdV1VFj1gMAALBZjBb2qmpLkvOS/ECSY5M8s6qO\nXdTseUk+3d0PSfLbSf7rWPUAAABsJmOO7B2f5Lruvr67v5TkgiSnLGpzSpLXDMt/muTJVVUj1gQA\nALApjBn2Dk9y48z6zmHbkm26+64kn01y/xFrAgAA2BQOHLHvpUboehVtUlWnJTltWP1cVV27xtrY\nPA5NcutGF8E9V//t2RtdAqzEuWV/9Z9MIGKf5tyyn6oz9vq55UHzNBoz7O1McuTM+hFJbl6mzc6q\nOjDJ/ZJ8anFH3X1+kvNHqpMJq6od3b1to+sApsW5BRiDcwvrbcxpnJclOaaqjq6qg5KcmmT7ojbb\nk+z+9f0zkvx1d3/dyB4AAAD3zGgje919V1WdnuSiJFuSvKq7r66qc5Ls6O7tSf4oyeuq6rosjOid\nOlY9AAAAm0kZSGPKquq0YRowwLpxbgHG4NzCehP2AAAAJmjMe/YAAADYIMIeAADABAl77DVV9StV\ndXVVXVlVH6yqR69Dn58bvh9VVR8alk+oqs8Ox/hgVb1zrccZ+n1lVR07LH+sqg5dj36BjbPUeWn2\n3/oq+vvKuQjYf+2+vtiLx7ukqq6duXZ5xjr0ua2qfndYfk5VvWLtlbK/GfM9e/AVVfXYJD+U5Hu7\n+4tDUDpoxEO+p7t/aD077O6fWc/+gI213HnJv3VgtarqwO6+a5Uf/4nu3rFetQx9rVt/7J+M7LG3\nfGuSW7v7i0nS3bd2983DCNlvVNX/rqodVfW9VXVRVX20qn4uSarqvlX1rqr6QFVdVVWnrKaAqnpa\nVb2vqq6oqndW1bcM219SVa+pqncM9fxoVZ07HOuvqupeQ7tLqmrboj5fWlW/MLP+61V1xir/jIC9\na7nz0lf+rVfV54Z/139XVZfOnDcePKxfVlXnLDUKUFVbquq3hjZXVtX/v1d/OmBd7eE64vyqekeS\n11bVvavqTcO/+z8ZPrP7nPLU4ZrnA1X15qq67x6O+edVdfkwA+G0me2fq6r/Oux7Z1UdP5y7rq+q\nk4c2J1TV2xf1d0hV3TBzbfONw7XPvdb5j4t9hLDH3vKOJEdW1d9X1e9V1RNm9t3Y3Y9N8p4kf5zk\nGUkek+ScYf8XkvxId39vkicm+e9VVXs43vfNTIX4lWHb3yR5THc/MskFSc6aaf/gJD+Y5JQk/yPJ\nxd393Uk+P2xfzh8leXaSVNUBWXhX5Ov3UBuwb1jpvLTbfZJc2t3fk+R/JfnZYfvvJPmd7n5UkpuX\n6f95ST47tHlUkp+tqqPX90cA9qKVriOOS3JKd/+bJP8uyae7++FJXjrsyzB74MVJnjJc0+xIcuZM\nH6+fuXa5/7Dtud19XJJtSc6Y2X6fJJcM+25P8p+TnJjkR/LV66ev0923J7kkX722OTXJn3X3nff4\nT4P9gmmc7BXd/bmqOi7J92UhsP1JVb1o2L19+H5VkvsOJ6Lbq+oLVfVNSe5I8htV9f1J7k5yeJJv\nSbJrhUMuNY3ziOG435qFKaQ3zOz7y+6+s6quSrIlyV/N1HTUCj/Xx6rqtqp65FDTFd192wp1AfuI\nPZyXdvtSkt2/Gb88CxdTSfLYJD88LL8hyX9b4hBPTfLw+uq9N/dLcky+9twD7D9Wuo7Y3t2fH5Yf\nn4VfCKW7P1RVVw7bH5Pk2CTvHX5nfVCS/z3Tx1LTOM+oqh8Zlo/Mwjnktiycm2avVb44cx1z1B5+\njldmIaj+eZKfzld/icUECXvsNd395Sz8NumS4WT07GHXF4fvd88s714/MMlPJNma5LjhRPaxJAev\nooSXJ3lZd2+vqhOSvGRm3+5pXHdX1Z391RdQ7q5hJa9M8pwkhyV51SrqAjbICuel3WbPB1/OPft/\ns5I8v7svWnOhwL5gpeuIO2aWl5t9VEn+Z3c/c56DDcd4SpLHdvf/qapL8tXrn8XXKrPXMSuep7r7\nvbXwMKknJNnS3R4qNWGmcbJXVNW3V9UxM5sekeTjc378fkk+OQS9JyZ50CrLuF+Sm4blxRd0a/HW\nJCdlYZqWizrYT6zxvHRpkqcPy6cu0+aiJP925t6Yh1bVfVZVLLAvmPc64m+S/FiS1MKTfb972H5p\nksdV1UOGffeuqofu4XifHoLed2RhZHC9vDbJG5O8eh37ZB8k7LG33DfJa6rqmmE6w7H52t+IreT1\nSbZV1Y4sjPJ9ZJU1vCTJm6vqPUluXWUfX6e7v5Tk4iRvGkYJgP3DWs5Lv5jkzKp6fxYe9PLZJdq8\nMsk1ST5QC69j+IOYUQP7i3tX1c6ZrzMz/3XE7yXZOpxXfinJlVm4f/eWLMwEeuOw79Ik37FCP3+V\n5MCh7UuH9uvl9Un+ZRYCHxNWXx0BBlZjeDDLB5L86+7+h42uBxhfVd07yee7u6vq1CTP7O5VPSkY\nmJaq2pLkXt39hap6cJJ3JXno8MvhfcJwL/Ep3f1TG10L4/IbRliDYXrG25O8VdCDTeW4JK8Yngz8\nmSTP3eB6gH3HvZNcPEzhriT/dh8Lei9P8gNJ/r+NroXxGdkDAACYIPfsAQAATJCwBwAAMEHCHgAA\nwAQJewDsV6rqy1X1wZmvo9ahz5+rqmcNy388PKlupfYfq6qrhuNfVVWrehJnVZ1QVW+/B+0fUVUe\nqgDAXDyNE4D9zee7+xHr2WF3//4qPvbE7r61qr49yTuSvG09a1rGI5JsS3LhXjgWAPs5I3sA7Peq\n6qiqek9VfWD4+lfD9hOq6t1V9aaq+vuq+s2q+omqev8wIvfgod1LquoFi/p8clW9dWb9xKp6yxKH\n/8Ykn56p40Mzn3lBVb1kWH5IVb2zqv5uqPHBi473qKq6oqq+raruU1WvqqrLhm2nVNVBSc5J8uPD\niOKPr8sfHgCTZWQPgP3Nv6iqDw7LN3T3jyT5ZJITh5cYH5PkjVkYAUuS70nynUk+leT6JK/s7uOr\n6heSPD/JLy5znL9Ocl5Vbe3uW5L8dJJXz+y/eHjP3rcl+bE56n59kt/s7rdW1cFZ+IXrkUkyhNOX\nZ+Elx5+oqt9I8tfd/dyq+qYk70/yziRnJ9nW3afPcTwANjlhD4D9zVLTOO+VhZecPyLJl5M8dGbf\nZd39j0lSVR/NwpTLJLkqyROXO0h3d1W9LslPVtWrkzw2ybNmmuyexvngJO+qqkuW66uqDklyeHe/\ndej7C8P2ZCGInp/kqd198/CRpyY5eWa08eAkD1yufwBYirAHwBT8+yT/lIVRvAOSfGFm3xdnlu+e\nWb87e/5/8NVJ/mLo783dfdfiBt390ar6pyTHJrk5X3uLxMHD91rhGP84tHvk8Pnd7Z/e3dfONqyq\nR++hXgD4CvfsATAF90vyj919d5KfSrJlPTodRtpuTvLiJH+8VJuqekCSo5N8PAuB8wFVdf+q+oYk\nPzT0889JdlbVDw+f+YaquvfQxWeS/GCS36iqE4ZtFyV5/jBNNFX1yGH77UkOWY+fDYDpE/YAmILf\nS/Lsqro0C1M471jHvl+f5MbuvmbR9ouHewcvTvKi7v6n7r4zCw9ReV+Styf5yEz7n0pyRlVdmeRv\nkxy2e0d3/1OSp2XhHsFHJ3lpFqamXjk88OWlu4+Z5FgPaAFgHtXdG10DAOyzquoVSa7o7j/a6FoA\n4J4Q9gBgGVV1eRZGCU/s7i/uqT0A7EuEPQAAgAlyzx4AAMAECXsAAAATJOwBAABMkLAHAAAwQcIe\nAADABP1f9oCWAkwO/68AAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "3d753b85175de3588c280a94b10318eb095234a6"
      },
      "cell_type": "markdown",
      "source": "As you can see, Small Family has higher chance of survival, followed by Singles and last Large Family.\nOne another cool pattern i found. I must give other kernels to give this idea, but i slightly changed it. If you notice, if one family member survives, the chances of whole family surviving is high.\nSo we will create a new feature called Family Survival. From the age bucket, it is clear that Infant and YoungChild have high survival. So if a infant or young child survives, i am assuming that the whoel family survives.\nI will use Family name to identify the whole family. Lets see how that looks"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "031121195225f894d60807826a76ccf7e5e24145"
      },
      "cell_type": "code",
      "source": "allset['LastName']=allset.Name.str.extract('([A-Za-z]+)\\,', expand=False)\n\n#WithFamily=allset.loc[(allset['Age']<=10) & (allset['Survived']==1),'LastName']\nWithFamily=allset.loc[(allset['Age']<=10),'LastName']\nallset['FamilySurvived']=0\nfor lastname in WithFamily:\n    allset.loc[(allset['LastName']==lastname),'FamilySurvived']=1\nprint(allset.FamilySurvived.sum())",
      "execution_count": 114,
      "outputs": [
        {
          "output_type": "stream",
          "text": "222\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "cb2b008fbc459a31279792442a501419b2926f47"
      },
      "cell_type": "markdown",
      "source": "Alright!!! with that we have identified all the features we need. I have ignored Fare, Cabin, PassengerID as from the analysis there isnt a good correlation and lot of noise(lot of empty values for cabin).\nBefore i use the feature, i performed one improtant operation on the features above. **One Hot Encoding** . It can be well explained with an example. Take Pclass with possible values as 1, 2 and 3. Using the feature as in put to the model will result in class 3 getting higher weightage than task 1, where in reality class 1 as higher survival chance. so the value of the feature affects. To remove this, we would convert each feature into a one hot encoding where in for Pclass as an example, we would create 3 new feature with binary values(which identifies the presence or absence of this feature).\nLets do that for all the feature below"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "5f946d15405c63f470f5ce5ad77f472733bd6959",
        "collapsed": true
      },
      "cell_type": "code",
      "source": "\n# use pandas get_dummies function to generate one hot encoding for each feature\nDClass=pd.get_dummies(allset['Pclass'], prefix='Pclass')\n# append the new feature to the existing set\nallset = pd.concat([allset, DClass], axis=1)\nDEmbarked=pd.get_dummies(allset['Embarked'], prefix='Embarked')\nallset = pd.concat([allset, DEmbarked], axis=1)\nDTicketFirst=pd.get_dummies(allset['TicketBucket'], prefix='TicketBucket')\nallset = pd.concat([allset, DTicketFirst], axis=1)    \nDGender=pd.get_dummies(allset['Sex'], prefix='Sex')\nallset = pd.concat([allset, DGender], axis=1)\nDFamilyBucket=pd.get_dummies(allset['FamilyBucket'], prefix='FamilyBucket')\nallset = pd.concat([allset, DFamilyBucket], axis=1)    \nDAgeBand=pd.get_dummies(allset['AgeBand'], prefix='AgeBand')\nallset = pd.concat([allset, DAgeBand], axis=1)    \n",
      "execution_count": 115,
      "outputs": []
    },
    {
      "metadata": {
        "_uuid": "82a0ed8b02db97b1a8b847c7f66ae3947ff0e23d"
      },
      "cell_type": "markdown",
      "source": "So that is done. Finally lets drop all the features we don need anymore and see how the final data set looks..."
    },
    {
      "metadata": {
        "_cell_guid": "295dc324-f6ed-4a8f-b297-9b88752f455a",
        "_uuid": "a47e4776cc1dca34ae465902d7a74fddc4c48671",
        "trusted": true
      },
      "cell_type": "code",
      "source": "#Drop features\nallset=allset.drop(['Name'],axis=1)\nallset=allset.drop(['Age'],axis=1)\nallset=allset.drop(['AgeBand'],axis=1)\nallset=allset.drop(['Ticket'],axis=1)\nallset=allset.drop(['TicketFirst'],axis=1)\nallset=allset.drop(['Fare'],axis=1)\nallset=allset.drop(['Pclass'],axis=1)\nallset=allset.drop(['Salutation'],axis=1)\nallset=allset.drop(['Cabin'],axis=1)\nallset=allset.drop(['Embarked'],axis=1)\nallset=allset.drop(['Sex'],axis=1)\nallset=allset.drop(['SibSp'],axis=1)\nallset=allset.drop(['Parch'],axis=1)\nallset=allset.drop(['TotalFamily'],axis=1)\nallset=allset.drop(['LastName'],axis=1)\nallset=allset.drop(['FamilyBucket'],axis=1)\nallset=allset.drop(['TicketBucket'],axis=1)\n\ntrain_df=allset[:891]\ntest_df=allset[891:]\ntrain_df.head(20)",
      "execution_count": 116,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 116,
          "data": {
            "text/plain": "    PassengerId         ...          AgeBand_YoungChild\n0             1         ...                           0\n1             2         ...                           0\n2             3         ...                           0\n3             4         ...                           0\n4             5         ...                           0\n5             6         ...                           0\n6             7         ...                           0\n7             8         ...                           1\n8             9         ...                           0\n9            10         ...                           0\n10           11         ...                           1\n11           12         ...                           0\n12           13         ...                           0\n13           14         ...                           0\n14           15         ...                           0\n15           16         ...                           0\n16           17         ...                           1\n17           18         ...                           0\n18           19         ...                           0\n19           20         ...                           0\n\n[20 rows x 21 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>FamilySurvived</th>\n      <th>Pclass_1</th>\n      <th>Pclass_2</th>\n      <th>Pclass_3</th>\n      <th>Embarked_C</th>\n      <th>Embarked_Q</th>\n      <th>Embarked_S</th>\n      <th>TicketBucket_High</th>\n      <th>TicketBucket_Low</th>\n      <th>TicketBucket_Medium</th>\n      <th>Sex_female</th>\n      <th>Sex_male</th>\n      <th>FamilyBucket_LargeFamily</th>\n      <th>FamilyBucket_Single</th>\n      <th>FamilyBucket_SmallFamily</th>\n      <th>AgeBand_Adults</th>\n      <th>AgeBand_Infant</th>\n      <th>AgeBand_Seniors</th>\n      <th>AgeBand_YoungChild</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>7</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>8</td>\n      <td>0.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>9</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>10</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>11</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>12</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>13</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>14</td>\n      <td>0.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>15</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>16</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>17</td>\n      <td>0.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>18</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>19</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>20</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "339cea770a0d3244a4e07d148b0a0c8dbae4c132",
        "collapsed": true
      },
      "cell_type": "markdown",
      "source": "Lets create the train, output and test data set."
    },
    {
      "metadata": {
        "_cell_guid": "7169ad2a-1592-4579-bc56-6f92bae36ccf",
        "_uuid": "b4b1ba339b694af3673806c58413ea75e48a7ca5",
        "scrolled": true,
        "trusted": true
      },
      "cell_type": "code",
      "source": "#Remove Survived and PassengerID for XTrain\nX_Train=train_df.drop(['Survived','PassengerId'],axis=1)\n#YTrain will contain the output feature Survived\nY_Train=train_df.Survived\n#Create test set which is same as X_Train but without Survived\nX_Test=test_df.drop(['PassengerId','Survived'],axis=1)\nX_Train.shape,Y_Train.shape,X_Test.shape",
      "execution_count": 117,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 117,
          "data": {
            "text/plain": "((891, 19), (891,), (418, 19))"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "51620d037fa73120da16f590810f38a97261a8dd"
      },
      "cell_type": "markdown",
      "source": "Lets do the modelling. I initiall selected LogisticRegression and it gave me an accuracy of 83.04 on the train set, but on the test set, it gave 79.4. I was more keen on hitting the 80% mark. I hence used RandomForestClassifier. Its an ensemble model using Decision Trees where in it create multiple Decision Trees and uses voting to determine the best prediction."
    },
    {
      "metadata": {
        "_cell_guid": "38b96370-f0da-4936-96fe-94cf2fa8a7bc",
        "_uuid": "a852d598b127effe31d1d3157132ac707eb357b6",
        "trusted": true
      },
      "cell_type": "code",
      "source": "logreg = RandomForestClassifier()\nlogreg.fit(X_Train, Y_Train)\nY_Pred = logreg.predict(X_Test)\nacc_log = round(logreg.score(X_Train, Y_Train) * 100, 2)\nacc_log\n",
      "execution_count": 119,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 119,
          "data": {
            "text/plain": "85.069999999999993"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "f1ce7f90051a05e238683db19b416395aa4f5b53"
      },
      "cell_type": "markdown",
      "source": "The last step is to create the output file and submit it to Kaggle. I got a accuracy of 81.8% on the test data set and put me on the rank 427!!!\n"
    },
    {
      "metadata": {
        "_cell_guid": "f7652f4e-af86-41a3-ab6e-304024a2c6e1",
        "_uuid": "f74601bcea27c42430e4a880a23f044488b6be9e",
        "trusted": true,
        "collapsed": true
      },
      "cell_type": "code",
      "source": "FinalResult=pd.DataFrame({'PassengerId':test_df[\"PassengerId\"],'Survived':Y_Pred.astype(int)})\nFinalResult.to_csv('gender_submission.csv', index=False)\nTestResult=pd.DataFrame(test_df)\n",
      "execution_count": 120,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "collapsed": true,
        "_uuid": "d8cc3ffcdb97c0b23638147dc64058242d22647d"
      },
      "cell_type": "code",
      "source": "",
      "execution_count": null,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "collapsed": true,
        "_uuid": "fc608b0fcacbe5cddac29436eb1f5344e691b30e"
      },
      "cell_type": "code",
      "source": "",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": "3.6.5",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 1
}